<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云原生技术圈 – 转载</title><link>https://sreionet.github.io/tags/%E8%BD%AC%E8%BD%BD/</link><description>Recent content in 转载 on 云原生技术圈</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 13 Sep 2022 10:56:21 +0800</lastBuildDate><atom:link href="https://sreionet.github.io/tags/%E8%BD%AC%E8%BD%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Istio可观测性系列-性能指标</title><link>https://sreionet.github.io/blog/2022/09/13/6899d1/</link><pubDate>Tue, 13 Sep 2022 10:56:21 +0800</pubDate><guid>https://sreionet.github.io/blog/2022/09/13/6899d1/</guid><description>
&lt;h1 id="istio-指标">Istio 指标&lt;/h1>
&lt;h2 id="istio-自己的-metrics">Istio 自己的 Metrics&lt;/h2>
&lt;h3 id="标准指标说明">标准指标说明&lt;/h3>
&lt;blockquote>
&lt;p>参考：https://istio.io/latest/docs/reference/config/metrics/&lt;/p>
&lt;/blockquote>
&lt;h4 id="metrics">Metrics&lt;/h4>
&lt;p>对于 HTTP、HTTP/2 和 GRPC 流量，Istio 默认生成以下指标：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Request Count&lt;/strong> (&lt;code>istio_requests_total&lt;/code>): This is a &lt;code>COUNTER&lt;/code> incremented for every request handled by an Istio proxy.&lt;/li>
&lt;li>&lt;strong>Request Duration&lt;/strong> (&lt;code>istio_request_duration_milliseconds&lt;/code>): This is a &lt;code>DISTRIBUTION&lt;/code> which measures the duration of requests.&lt;/li>
&lt;li>&lt;strong>Request Size&lt;/strong> (&lt;code>istio_request_bytes&lt;/code>): This is a &lt;code>DISTRIBUTION&lt;/code> which measures HTTP request body sizes.&lt;/li>
&lt;li>&lt;strong>Response Size&lt;/strong> (&lt;code>istio_response_bytes&lt;/code>): This is a &lt;code>DISTRIBUTION&lt;/code> which measures HTTP response body sizes.&lt;/li>
&lt;li>&lt;strong>gRPC Request Message Count&lt;/strong> (&lt;code>istio_request_messages_total&lt;/code>): This is a &lt;code>COUNTER&lt;/code> incremented for every gRPC message sent from a client.&lt;/li>
&lt;li>&lt;strong>gRPC Response Message Count&lt;/strong> (&lt;code>istio_response_messages_total&lt;/code>): This is a &lt;code>COUNTER&lt;/code> incremented for every gRPC message sent from a server.&lt;/li>
&lt;/ul>
&lt;p>对于 TCP 流量，Istio 生成以下指标：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tcp Bytes Sent&lt;/strong> (&lt;code>istio_tcp_sent_bytes_total&lt;/code>): This is a &lt;code>COUNTER&lt;/code> which measures the size of total bytes sent during response in case of a TCP connection.&lt;/li>
&lt;li>&lt;strong>Tcp Bytes Received&lt;/strong> (&lt;code>istio_tcp_received_bytes_total&lt;/code>): This is a &lt;code>COUNTER&lt;/code> which measures the size of total bytes received during request in case of a TCP connection.&lt;/li>
&lt;li>&lt;strong>Tcp Connections Opened&lt;/strong> (&lt;code>istio_tcp_connections_opened_total&lt;/code>): This is a &lt;code>COUNTER&lt;/code> incremented for every opened connection.&lt;/li>
&lt;li>&lt;strong>Tcp Connections Closed&lt;/strong> (&lt;code>istio_tcp_connections_closed_total&lt;/code>): This is a &lt;code>COUNTER&lt;/code> incremented for every closed connection.&lt;/li>
&lt;/ul>
&lt;h4 id="prometheus-的-labels">Prometheus 的 Labels&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Reporter&lt;/strong>: This identifies the reporter of the request. It is set to &lt;code>destination&lt;/code> if report is from a server Istio proxy and &lt;code>source&lt;/code> if report is from a client Istio proxy or a gateway.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Source Workload&lt;/strong>: This identifies the name of source workload which controls the source, or “unknown” if the source information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Source Workload Namespace&lt;/strong>: This identifies the namespace of the source workload, or “unknown” if the source information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Source Principal&lt;/strong>: This identifies the peer principal of the traffic source. It is set when peer authentication is used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Source App&lt;/strong>: This identifies the source application based on &lt;code>app&lt;/code> label of the source workload, or “unknown” if the source information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Source Version&lt;/strong>: This identifies the version of the source workload, or “unknown” if the source information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Workload&lt;/strong>: This identifies the name of destination workload, or “unknown” if the destination information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Workload Namespace&lt;/strong>: This identifies the namespace of the destination workload, or “unknown” if the destination information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Principal&lt;/strong>: This identifies the peer principal of the traffic destination. It is set when peer authentication is used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination App&lt;/strong>: This identifies the destination application based on &lt;code>app&lt;/code> label of the destination workload, or “unknown” if the destination information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Version&lt;/strong>: This identifies the version of the destination workload, or “unknown” if the destination information is missing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Service&lt;/strong>: This identifies destination service host responsible for an incoming request. Ex: &lt;code>details.default.svc.cluster.local&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Service Name&lt;/strong>: This identifies the destination service name. Ex: “details”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Service Namespace&lt;/strong>: This identifies the namespace of destination service.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Request Protocol&lt;/strong>: This identifies the protocol of the request. It is set to request or connection protocol.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Response Code&lt;/strong>: This identifies the response code of the request. This label is present only on HTTP metrics.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Connection Security Policy&lt;/strong>: This identifies the service authentication policy of the request. It is set to &lt;code>mutual_tls&lt;/code> when Istio is used to make communication secure and report is from destination. It is set to &lt;code>unknown&lt;/code> when report is from source since security policy cannot be properly populated.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Response Flags&lt;/strong>: Additional details about the response or connection from proxy. In case of Envoy, see &lt;code>%RESPONSE_FLAGS%&lt;/code> in &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#config-access-log-format-response-flags">Envoy Access Log&lt;/a> for more detail.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Canonical Service&lt;/strong>: A workload belongs to exactly one canonical service, whereas it can belong to multiple services. A canonical service has a name and a revision so it results in the following labels.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">source_canonical_service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">source_canonical_revision&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">destination_canonical_service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">destination_canonical_revision&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Destination Cluster&lt;/strong>: This identifies the cluster of the destination workload. This is set by: &lt;code>global.multiCluster.clusterName&lt;/code> at cluster install time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Source Cluster&lt;/strong>: This identifies the cluster of the source workload. This is set by: &lt;code>global.multiCluster.clusterName&lt;/code> at cluster install time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>gRPC Response Status&lt;/strong>: This identifies the response status of the gRPC. This label is present only on gRPC metrics.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="使用">使用&lt;/h3>
&lt;h4 id="istio-proxy-与应用的-metrics-整合输出">istio-proxy 与应用的 Metrics 整合输出&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/main/diagrams/istio-ports-components.drawio.svg" alt="Istio端口与组件">&lt;/p>
&lt;blockquote>
&lt;p>参考：https://istio.io/v1.14/docs/ops/integrations/prometheus/#option-1-metrics-merging&lt;/p>
&lt;/blockquote>
&lt;p>Istio 能够完全通过 &lt;code>prometheus.io&lt;/code> annotations 来控制抓取。虽然 &lt;code>prometheus.io&lt;/code> annotations 不是 Prometheus 的核心部分，但它们已成为配置抓取的事实标准。&lt;/p>
&lt;p>此选项默认启用，但可以通过在 &lt;a href="https://istio.io/v1.14/docs/setup/install/istioctl/">安装&lt;/a> 期间传递 &lt;code>--set meshConfig.enablePrometheusMerge=false&lt;/code> 来禁用。启用后，将向所有数据平面 pod 添加适当的 &lt;code>prometheus.io&lt;/code> annotations 以设置抓取。如果这些注释已经存在，它们将被覆盖。使用此选项，Envoy sidecar 会将 Istio 的指标与应用程序指标合并。合并后的指标将从 &lt;code>/stats/prometheus:15020&lt;/code> 中抓取。&lt;/p>
&lt;p>此选项以明文形式公开所有指标。&lt;/p>
&lt;h4 id="定制为-metrics-增加维度">定制：为 Metrics 增加维度&lt;/h4>
&lt;blockquote>
&lt;p>参考： &lt;a href="https://istio.io/latest/docs/tasks/observability/metrics/customize-metrics/#custom-statistics-configuration">https://istio.io/latest/docs/tasks/observability/metrics/customize-metrics/#custom-statistics-configuration&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>如，增加端口、与 HTTP HOST 头 维度。&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">install.istio.io/v1alpha1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">IstioOperator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">values&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">telemetry&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">v2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">prometheus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configOverride&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inboundSidecar&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">requests_total&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dimensions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">destination_port&lt;/span>: &lt;span style="color:#ae81ff">string(destination.port)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">request_host&lt;/span>: &lt;span style="color:#ae81ff">request.host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">outboundSidecar&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">requests_total&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dimensions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">destination_port&lt;/span>: &lt;span style="color:#ae81ff">string(destination.port)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">request_host&lt;/span>: &lt;span style="color:#ae81ff">request.host&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">gateway&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metrics&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">requests_total&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dimensions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">destination_port&lt;/span>: &lt;span style="color:#ae81ff">string(destination.port)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">request_host&lt;/span>: &lt;span style="color:#ae81ff">request.host&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>使用以下命令将以下 annotation 应用到所有注入的 pod，其中包含要提取到 Prometheus &lt;a href="https://en.wikipedia.org/wiki/Time_series">时间序列&lt;/a> 的维度列表：&lt;/li>
&lt;/ol>
&lt;p>仅当您的维度不在 [DefaultStatTags 列表] 中时才需要此步骤（https://github.com/istio/istio/blob/release-1.14/pkg/bootstrap/config.go）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>: &lt;span style="color:#75715e"># pod template&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">sidecar.istio.io/extraStatTags&lt;/span>: &lt;span style="color:#ae81ff">destination_port,request_host&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要在网格范围内启用额外 &lt;code>Tag&lt;/code> ，您可以将 &lt;code>extraStatTags&lt;/code> 添加到网格配置中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">meshConfig&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">defaultConfig&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">extraStatTags&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">destination_port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">request_host&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>参考 : &lt;a href="https://istio.io/latest/docs/reference/config/proxy_extensions/stats/#MetricConfig">https://istio.io/latest/docs/reference/config/proxy_extensions/stats/#MetricConfig&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="定制加入-request--response-元信息维度">定制：加入 request / response 元信息维度&lt;/h4>
&lt;p>可以把 request 或 repsonse 里一些基础信息 加入到 指标的维度。如，URL Path，这在需要为相同服务分隔统计不同 REST API 的指标时，相当有用。&lt;/p>
&lt;blockquote>
&lt;p>参考 : &lt;a href="https://istio.io/latest/docs/tasks/observability/metrics/classify-metrics/">https://istio.io/latest/docs/tasks/observability/metrics/classify-metrics/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="工作原理">工作原理&lt;/h3>
&lt;h4 id="istio-stat-filter-使用">istio stat filter 使用&lt;/h4>
&lt;p>Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 自己想要的指标：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">$ k -n istio-system get envoyfilters.networking.istio.io stats-filter-1.14 -o yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.istio.io/v1alpha3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">EnvoyFilter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">install.operator.istio.io/owning-resource-namespace&lt;/span>: &lt;span style="color:#ae81ff">istio-system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">istio.io/rev&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operator.istio.io/component&lt;/span>: &lt;span style="color:#ae81ff">Pilot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operator.istio.io/version&lt;/span>: &lt;span style="color:#ae81ff">1.14.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">stats-filter-1.14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">istio-system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configPatches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">applyTo&lt;/span>: &lt;span style="color:#ae81ff">HTTP_FILTER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">SIDECAR_OUTBOUND&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listener&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filterChain&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">envoy.filters.network.http_connection_manager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">subFilter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">envoy.filters.http.router&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxyVersion&lt;/span>: &lt;span style="color:#ae81ff">^1\.14.*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">patch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operation&lt;/span>: &lt;span style="color:#ae81ff">INSERT_BEFORE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">istio.stats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">typed_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;@type&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type_url&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configuration&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;@type&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/google.protobuf.StringValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;debug&amp;#34;: &amp;#34;false&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;stat_prefix&amp;#34;: &amp;#34;istio&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root_id&lt;/span>: &lt;span style="color:#ae81ff">stats_outbound&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vm_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">code&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inline_string&lt;/span>: &lt;span style="color:#ae81ff">envoy.wasm.stats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runtime&lt;/span>: &lt;span style="color:#ae81ff">envoy.wasm.runtime.null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vm_id&lt;/span>: &lt;span style="color:#ae81ff">stats_outbound&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">applyTo&lt;/span>: &lt;span style="color:#ae81ff">HTTP_FILTER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">SIDECAR_INBOUND&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listener&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filterChain&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">envoy.filters.network.http_connection_manager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">subFilter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">envoy.filters.http.router&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxyVersion&lt;/span>: &lt;span style="color:#ae81ff">^1\.14.*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">patch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operation&lt;/span>: &lt;span style="color:#ae81ff">INSERT_BEFORE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">istio.stats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">typed_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;@type&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type_url&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configuration&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;@type&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/google.protobuf.StringValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;debug&amp;#34;: &amp;#34;false&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;stat_prefix&amp;#34;: &amp;#34;istio&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;disable_host_header_fallback&amp;#34;: true,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;metrics&amp;#34;: [
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;dimensions&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;destination_cluster&amp;#34;: &amp;#34;node.metadata[&amp;#39;CLUSTER_ID&amp;#39;]&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;source_cluster&amp;#34;: &amp;#34;downstream_peer.cluster_id&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root_id&lt;/span>: &lt;span style="color:#ae81ff">stats_inbound&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vm_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">code&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inline_string&lt;/span>: &lt;span style="color:#ae81ff">envoy.wasm.stats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runtime&lt;/span>: &lt;span style="color:#ae81ff">envoy.wasm.runtime.null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vm_id&lt;/span>: &lt;span style="color:#ae81ff">stats_inbound&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">applyTo&lt;/span>: &lt;span style="color:#ae81ff">HTTP_FILTER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">match&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">GATEWAY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listener&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filterChain&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">envoy.filters.network.http_connection_manager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">subFilter&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">envoy.filters.http.router&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxyVersion&lt;/span>: &lt;span style="color:#ae81ff">^1\.14.*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">patch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operation&lt;/span>: &lt;span style="color:#ae81ff">INSERT_BEFORE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">istio.stats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">typed_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;@type&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type_url&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">configuration&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;@type&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">type.googleapis.com/google.protobuf.StringValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;debug&amp;#34;: &amp;#34;false&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;stat_prefix&amp;#34;: &amp;#34;istio&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;disable_host_header_fallback&amp;#34;: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root_id&lt;/span>: &lt;span style="color:#ae81ff">stats_outbound&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vm_config&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">code&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">local&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inline_string&lt;/span>: &lt;span style="color:#ae81ff">envoy.wasm.stats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runtime&lt;/span>: &lt;span style="color:#ae81ff">envoy.wasm.runtime.null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vm_id&lt;/span>: &lt;span style="color:#ae81ff">stats_outbound&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">priority&lt;/span>: -&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="istio-stat-plugin-实现">istio stat Plugin 实现&lt;/h4>
&lt;p>&lt;a href="https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc">https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc&lt;/a>&lt;/p>
&lt;p>内置的 Metric:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>MetricFactory&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> PluginRootContext&lt;span style="color:#f92672">::&lt;/span>defaultMetrics() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>MetricFactory&lt;span style="color:#f92672">&amp;gt;&lt;/span> default_metrics &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// HTTP, HTTP/2, and GRPC metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> MetricFactory{&lt;span style="color:#e6db74">&amp;#34;requests_total&amp;#34;&lt;/span>, MetricType&lt;span style="color:#f92672">::&lt;/span>Counter,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f92672">::&lt;/span>Wasm&lt;span style="color:#f92672">::&lt;/span>Common&lt;span style="color:#f92672">::&lt;/span>RequestInfo&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>HTTP) &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>GRPC),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_standard_labels, &lt;span style="color:#75715e">/* recurrent */&lt;/span> false},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MetricFactory{&lt;span style="color:#e6db74">&amp;#34;request_duration_milliseconds&amp;#34;&lt;/span>, MetricType&lt;span style="color:#f92672">::&lt;/span>Histogram,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f92672">::&lt;/span>Wasm&lt;span style="color:#f92672">::&lt;/span>Common&lt;span style="color:#f92672">::&lt;/span>RequestInfo&lt;span style="color:#f92672">&amp;amp;&lt;/span> request_info) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> request_info.duration &lt;span style="color:#75715e">/* in nanoseconds */&lt;/span> &lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1000000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>HTTP) &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>GRPC),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_standard_labels, &lt;span style="color:#75715e">/* recurrent */&lt;/span> false},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MetricFactory{&lt;span style="color:#e6db74">&amp;#34;request_bytes&amp;#34;&lt;/span>, MetricType&lt;span style="color:#f92672">::&lt;/span>Histogram,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f92672">::&lt;/span>Wasm&lt;span style="color:#f92672">::&lt;/span>Common&lt;span style="color:#f92672">::&lt;/span>RequestInfo&lt;span style="color:#f92672">&amp;amp;&lt;/span> request_info) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> request_info.request_size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>HTTP) &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>GRPC),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_standard_labels, &lt;span style="color:#75715e">/* recurrent */&lt;/span> false},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MetricFactory{&lt;span style="color:#e6db74">&amp;#34;response_bytes&amp;#34;&lt;/span>, MetricType&lt;span style="color:#f92672">::&lt;/span>Histogram,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f92672">::&lt;/span>Wasm&lt;span style="color:#f92672">::&lt;/span>Common&lt;span style="color:#f92672">::&lt;/span>RequestInfo&lt;span style="color:#f92672">&amp;amp;&lt;/span> request_info) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> request_info.response_size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>HTTP) &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(Protocol&lt;span style="color:#f92672">::&lt;/span>GRPC),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_standard_labels, &lt;span style="color:#75715e">/* recurrent */&lt;/span> false},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc#L591">https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc#L591&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> PluginRootContext&lt;span style="color:#f92672">::&lt;/span>report(&lt;span style="color:#f92672">::&lt;/span>Wasm&lt;span style="color:#f92672">::&lt;/span>Common&lt;span style="color:#f92672">::&lt;/span>RequestInfo&lt;span style="color:#f92672">&amp;amp;&lt;/span> request_info,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> end_stream) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map(istio_dimensions_, outbound_, peer_node_info.get(), request_info);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (size_t i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> expressions_.size(); i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>evaluateExpression(expressions_[i].token,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>istio_dimensions_.at(count_standard_labels &lt;span style="color:#f92672">+&lt;/span> i))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG_TRACE(absl&lt;span style="color:#f92672">::&lt;/span>StrCat(&lt;span style="color:#e6db74">&amp;#34;Failed to evaluate expression: &amp;lt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expressions_[i].expression, &lt;span style="color:#e6db74">&amp;#34;&amp;gt;&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> istio_dimensions_[count_standard_labels &lt;span style="color:#f92672">+&lt;/span> i] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unknown&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> stats_it &lt;span style="color:#f92672">=&lt;/span> metrics_.find(istio_dimensions_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (stats_it &lt;span style="color:#f92672">!=&lt;/span> metrics_.end()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> stat : stats_it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>second) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (end_stream &lt;span style="color:#f92672">||&lt;/span> stat.recurrent_) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stat.record(request_info);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG_DEBUG(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> absl&lt;span style="color:#f92672">::&lt;/span>StrCat(&lt;span style="color:#e6db74">&amp;#34;metricKey cache hit &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;, stat=&amp;#34;&lt;/span>, stat.metric_id_));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cache_hits_accumulator_&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (cache_hits_accumulator_ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> incrementMetric(cache_hits_, cache_hits_accumulator_);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cache_hits_accumulator_ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>关于 Istio 的指标原理，这是一个很好的参考文章：https://blog.christianposta.com/understanding-istio-telemetry-v2/&lt;/p>
&lt;/blockquote>
&lt;h2 id="envoy-内置的-metrics">Envoy 内置的 Metrics&lt;/h2>
&lt;p>Istio 默认用 istio-agent 去整合 Envoy 的 metrics。
而 Istio 默认打开的 Envoy 内置 Metrics 很少：&lt;/p>
&lt;blockquote>
&lt;p>见：https://istio.io/latest/docs/ops/configuration/telemetry/envoy-stats/&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>cluster_manager
listener_manager
server
cluster.xds-grpc
&lt;/code>&lt;/pre>&lt;h3 id="定制-envoy-内置的-metrics">定制 Envoy 内置的 Metrics&lt;/h3>
&lt;blockquote>
&lt;p>参考：https://istio.io/latest/docs/ops/configuration/telemetry/envoy-stats/&lt;/p>
&lt;/blockquote>
&lt;p>如果要配置 Istio Proxy 以记录 其它 Envoy 原生的指标，您可以将 &lt;a href="https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#ProxyStatsMatcher">&lt;code>ProxyConfig.ProxyStatsMatcher&lt;/code>&lt;/a> 添加到网格配置中。 例如，要全局启用断路器、重试和上游连接的统计信息，您可以指定 stats matcher，如下所示：&lt;/p>
&lt;p>代理需要重新启动以获取统计匹配器配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">install.istio.io/v1alpha1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">IstioOperator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">meshConfig&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">defaultConfig&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxyStatsMatcher&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inclusionRegexps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;.*circuit_breakers.*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inclusionPrefixes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;upstream_rq_retry&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;upstream_cx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您还可以使用 &lt;code>proxy.istio.io/config&lt;/code> annotation 为个别代码指定配置。 例如，要配置与上面相同的统计信息，您可以将 annotation 添加到 gateway proxy 或 workload，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy.istio.io/config&lt;/span>: |-&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> proxyStatsMatcher:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> inclusionRegexps:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - &amp;#34;.*circuit_breakers.*&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> inclusionPrefixes:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - &amp;#34;upstream_rq_retry&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - &amp;#34;upstream_cx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="原理">原理&lt;/h3>
&lt;p>下面，看看 Istio 默认配置下，如何配置 Envoy。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>istioctl proxy-config bootstrap fortio-server | yq eval -P &amp;gt; envoy-config-bootstrap-default.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">bootstrap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">statsConfig&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">statsTags&lt;/span>: &lt;span style="color:#75715e"># 从指标名中抓取 Tag(prometheus label)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">tagName&lt;/span>: &lt;span style="color:#ae81ff">cluster_name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regex&lt;/span>: &lt;span style="color:#ae81ff">^cluster\.((.+?(\..+?\.svc\.cluster\.local)?)\.)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">tagName&lt;/span>: &lt;span style="color:#ae81ff">tcp_prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regex&lt;/span>: &lt;span style="color:#ae81ff">^tcp\.((.*?)\.)\w+?$&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">tagName&lt;/span>: &lt;span style="color:#ae81ff">response_code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regex&lt;/span>: &lt;span style="color:#ae81ff">(response_code=\.=(.+?);\.;)|_rq(_(\.d{3}))$&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">tagName&lt;/span>: &lt;span style="color:#ae81ff">response_code_class&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regex&lt;/span>: &lt;span style="color:#ae81ff">_rq(_(\dxx))$&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">tagName&lt;/span>: &lt;span style="color:#ae81ff">http_conn_manager_listener_prefix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">regex&lt;/span>: &lt;span style="color:#ae81ff">^listener(?=\.).*?\.http\.(((?:[_.[:digit:]]*|[_\[\]aAbBcCdDeEfF[:digit:]]*))\.)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">useAllDefaultTags&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">statsMatcher&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inclusionList&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">patterns&lt;/span>: &lt;span style="color:#75715e"># 选择要记录的指标&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">reporter=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">cluster_manager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">listener_manager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">cluster.xds-grpc&lt;/span> &lt;span style="color:#75715e">## 只记录 xDS cluster. 即不记录用户自己服务的 cluster !!!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">wasm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">suffix&lt;/span>: &lt;span style="color:#ae81ff">rbac.allowed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">suffix&lt;/span>: &lt;span style="color:#ae81ff">rbac.denied&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">suffix&lt;/span>: &lt;span style="color:#ae81ff">shadow_allowed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">suffix&lt;/span>: &lt;span style="color:#ae81ff">shadow_denied&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">prefix&lt;/span>: &lt;span style="color:#ae81ff">component&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时，如果修改 pod 的定义为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy.istio.io/config&lt;/span>: |-&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> proxyStatsMatcher:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> inclusionRegexps:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - &amp;#34;cluster\\..*fortio.*&amp;#34; #proxy upstream(outbound)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - &amp;#34;cluster\\..*inbound.*&amp;#34; #proxy upstream(inbound，这里一般就是指到同一 pod 中运行的应用了)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - &amp;#34;http\\..*&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> - &amp;#34;listener\\..*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>产生新的 Envoy 配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;stats_matcher&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;inclusion_list&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;patterns&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;reporter=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cluster_manager&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;listener_manager&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;server&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cluster.xds-grpc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;safe_regex&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;google_re2&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;regex&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cluster\\..*fortio.*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;safe_regex&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;google_re2&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;regex&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cluster\\..*inbound.*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;safe_regex&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;google_re2&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;regex&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http\\..*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;safe_regex&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;google_re2&amp;#34;&lt;/span>: {},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;regex&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;listener\\..*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结istio-proxy-指标地图">总结：Istio-Proxy 指标地图&lt;/h2>
&lt;p>要做好监控，首先要深入了解指标原理。而要了解指标原理，当然要知道指标是产生流程中的什么位置，什么组件。看完上面关于 Envoy 与 Istio 的指标说明后。可以大概得到以下结论：&lt;/p>
&lt;p>&lt;img src="https://sreionet.github.io/images/istio-metrics.png" alt="Istio-Proxy 指标地图">&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{note}" data-lang="{note}">本节的实验环境说明见于： {ref}`appendix-lab-env/appendix-lab-env-base:简单分层实验环境`
&lt;/code>&lt;/pre>&lt;p>本文出自https://istio-insider.readthedocs.io/&lt;/p></description></item><item><title>Blog: Envoy性能指标</title><link>https://sreionet.github.io/blog/2022/09/13/0affe7/</link><pubDate>Tue, 13 Sep 2022 10:46:39 +0800</pubDate><guid>https://sreionet.github.io/blog/2022/09/13/0affe7/</guid><description>
&lt;h1 id="envoy-指标">Envoy 指标&lt;/h1>
&lt;h2 id="envoy-指标概述">Envoy 指标概述&lt;/h2>
&lt;p>Envoy 的主要目标之一是使网络易于理解。 Envoy 会根据其配置方式产生大量统计信息。一般来说，统计数据(指标)分为三类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Downstream&lt;/strong>：Downstream 指标与外来的连接/请求有关。它们由 &lt;code>listener&lt;/code>、&lt;code>HTTP connection manager(HCM)&lt;/code>、&lt;code>TCP proxy filter&lt;/code> 等产生。&lt;/li>
&lt;li>&lt;strong>Upstream&lt;/strong>：Upstream 指标与外向的连接/请求有关。它们由 &lt;code>connection pool&lt;/code>、&lt;code>router filter&lt;/code>、&lt;code>tcp proxy filter&lt;/code>等产生。&lt;/li>
&lt;li>&lt;strong>Server&lt;/strong>：&lt;code>Server&lt;/code> 指标信息描述 Envoy 服务器实例的运作情况。服务器正常运行时间或分配的内存量等统计信息。&lt;/li>
&lt;/ul>
&lt;p>在最简单场景下，单个 Envoy Proxy 通常涉及 &lt;code>Downstream&lt;/code> 和 &lt;code>Upstream&lt;/code> 统计数据。这两种指标反映了取该 &lt;code>网络节点&lt;/code> 的运行情况。来自整个网格的统计数据提供了每个&lt;code> 网络节点&lt;/code> 和整体网络健康状况的非常详细的汇总信息。Envoy 的文档对这些指标有一些简单的说明。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="tag">Tag&lt;/h3>
&lt;p>Envoy 的指标还有两个子概念，支持在指标中使用： &lt;code>标签(tags)&lt;/code>/&lt;code>维度(dimensions)&lt;/code> 。这里的 &lt;code>tags&lt;/code> 对等于 Prometheus 指标的 label。意义上，可以理解为：分类维度。&lt;/p>
&lt;p>Envoy 的 &lt;code>指标&lt;/code> 由规范的字符串来标识。这些字符串的动态部分（子字符串）被提取成为 &lt;code>标签(tag)&lt;/code>。可以通过指定 &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#envoy-v3-api-msg-config-metrics-v3-tagspecifier">tag 提取规则(Tag Specifier configuration.)&lt;/a> 来定制 tag 。&lt;/p>
&lt;p>举个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### 1. 原始的 Envoy 指标 ###&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl exec fortio-server -c istio-proxy -- curl &lt;span style="color:#e6db74">&amp;#39;localhost:15000/stats&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 返回：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cluster.outbound|8080&lt;span style="color:#f92672">||&lt;/span>fortio-server-l2.mark.svc.cluster.local.external.upstream_rq_2xx: &lt;span style="color:#ae81ff">300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 其中：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># - `outbound|8080||fortio-server-l2.mark.svc.cluster.local` 部分是 upstream cluster 的名字。可以正则提取作为 tag。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># - `2xx` 部分是 HTTP Status Code 的分类。可以正则提取作为 tag。 下文将有这个提取规则的配置说明。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### 2. 给 Prometheus 的指标 ###&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl exec fortio-server -c istio-proxy -- curl &lt;span style="color:#e6db74">&amp;#39;localhost:15000/stats?format=prometheus&amp;#39;&lt;/span> | grep &lt;span style="color:#e6db74">&amp;#39;outbound|8080||fortio-server-l2&amp;#39;&lt;/span> | grep &lt;span style="color:#e6db74">&amp;#39;external.upstream_rq&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 返回：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>envoy_cluster_external_upstream_rq&lt;span style="color:#f92672">{&lt;/span>response_code_class&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2xx&amp;#34;&lt;/span>,cluster_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;outbound|8080||fortio-server-l2.mark.svc.cluster.local&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">300&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="指标数据类型">指标数据类型&lt;/h3>
&lt;p>Envoy 发出三种类型的值作为统计信息：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>计数器(Counters)&lt;/strong>：无符号整数，只会增加而不会减少。例如，总请求。&lt;/li>
&lt;li>&lt;strong>仪表(Gauges)&lt;/strong>：增加和减少的无符号整数。例如，当前活动的请求。&lt;/li>
&lt;li>&lt;strong>直方图(Histograms)&lt;/strong>：作为指标流的一部分的无符号整数，然后由收集器聚合以最终产生汇总的百分位值(percentile，即平常说的 P99/P50/Pxx)。例如，&lt;code>Upsteam&lt;/code> 响应时间。&lt;/li>
&lt;/ul>
&lt;p>在 Envoy 的内部实现中，Counters 和 Gauges 被分批并定期刷新以提高性能。Histograms 在接收时写入。&lt;/p>
&lt;h2 id="指标释义">指标释义&lt;/h2>
&lt;p>从指标的产出地点来划分，可以分为：&lt;/p>
&lt;ul>
&lt;li>cluster manager : 面向 &lt;code>upstream&lt;/code> 的 L3/L4/L7 层指标&lt;/li>
&lt;li>http connection manager(HCM) ： 面向 &lt;code>upstream&lt;/code> &amp;amp; &lt;code>downstream&lt;/code> 的 L7 层指标&lt;/li>
&lt;li>listeners : 面向 &lt;code>downstream&lt;/code> 的 L3/L4 层指标&lt;/li>
&lt;li>server(全局)&lt;/li>
&lt;li>watch dog&lt;/li>
&lt;/ul>
&lt;p>下面我只选择了部分关键的性能指标来简单说明。&lt;/p>
&lt;h3 id="cluster-manager">cluster manager&lt;/h3>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/upstream/cluster_manager/cluster_stats">Envoy 文档:cluster manager stats&lt;/a>&lt;/p>
&lt;p>上面文档已经说得比较详细了。我只补充一些在性能调优时需要关注的方面。那么，一般需要关注什么指标？&lt;/p>
&lt;p>我们从著名的 &lt;a href="https://www.brendangregg.com/usemethod.html">Utilization Saturation and Errors (USE)&lt;/a> 方法学来分析。&lt;/p>
&lt;p>利用率(Utilization):&lt;/p>
&lt;ul>
&lt;li>&lt;code>upstream_cx_total&lt;/code> (Counter): 连接数&lt;/li>
&lt;li>&lt;code>upstream_rq_active&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>饱和度(Saturation):&lt;/p>
&lt;ul>
&lt;li>&lt;code>upstream_rq_time&lt;/code> (Histogram): 响应时间&lt;/li>
&lt;li>&lt;code>upstream_cx_connect_ms&lt;/code> (Histogram)&lt;/li>
&lt;li>&lt;code>upstream_cx_rx_bytes_buffered&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_cx_tx_bytes_buffered&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_rq_pending_total&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_rq_pending_active&lt;/code> (Gauge)&lt;/li>
&lt;/ul>
&lt;p>错误(Error):&lt;/p>
&lt;ul>
&lt;li>&lt;code>upstream_cx_connect_fail&lt;/code> (Counter): 连接失败数&lt;/li>
&lt;li>&lt;code>upstream_cx_connect_timeout&lt;/code> (Counter): 连接超时数&lt;/li>
&lt;li>&lt;code>upstream_cx_overflow&lt;/code> (Counter): 集群连接断路器溢出的总次数&lt;/li>
&lt;li>&lt;code>upstream_cx_pool_overflow&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_cx_destroy_local_with_active_rq&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_cx_destroy_remote_with_active_rq&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_rq_timeout&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_rq_retry&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_rq_rx_reset&lt;/code>&lt;/li>
&lt;li>&lt;code>upstream_rq_tx_reset&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其它：&lt;/p>
&lt;ul>
&lt;li>&lt;code>upstream_rq_total&lt;/code> (Counter): TPS (吞吐)&lt;/li>
&lt;li>&lt;code>upstream_cx_destroy_local&lt;/code> (Counter): Envoy 主动断开的连接计数&lt;/li>
&lt;li>&lt;code>upstream_cx_destroy_remote&lt;/code> (Counter): Envoy 被动断开的连接计数&lt;/li>
&lt;li>&lt;code>upstream_cx_length_ms&lt;/code> (Histogram)&lt;/li>
&lt;/ul>
&lt;h3 id="http-connection-managerhcm">http connection manager(HCM)&lt;/h3>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/stats">Envoy 文档:http connection manager(HCM) stats&lt;/a>&lt;/p>
&lt;p>可以认为，这是面向 &lt;code>downstream&lt;/code> &amp;amp; 部分 &lt;code>upstream&lt;/code> 的 L7 层指标&lt;/p>
&lt;p>利用率(Utilization):&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_cx_total&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_active&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_http1_active&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_total&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_http1_total&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_active&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>饱和度(Saturation):&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_cx_rx_bytes_buffered&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_tx_bytes_buffered&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_flow_control_paused_reading_total&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_flow_control_resumed_reading_total&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>错误(Error):&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_cx_destroy_local_active_rq&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_destroy_remote_active_rq&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_rx_reset&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_tx_reset&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_too_large&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_max_duration_reached&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_timeout&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_rq_overload_close&lt;/code>&lt;/li>
&lt;li>&lt;code>rs_too_large&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其它：&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_cx_destroy_remote&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_destroy_local&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_length_ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="listeners">listeners&lt;/h3>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/stats">Envoy 文档:listener stats&lt;/a>&lt;/p>
&lt;p>可以认为，这是 downstream 的 L3/L4 层的指标。&lt;/p>
&lt;p>利用率(Utilization):&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_cx_total&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_active&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>饱和度(Saturation):&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_pre_cx_active&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>错误(Error):&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_cx_transport_socket_connect_timeout&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_cx_overflow&lt;/code>&lt;/li>
&lt;li>&lt;code>no_filter_chain_match&lt;/code>&lt;/li>
&lt;li>&lt;code>downstream_listener_filter_error&lt;/code>&lt;/li>
&lt;li>&lt;code>no_certificate&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其它：&lt;/p>
&lt;ul>
&lt;li>&lt;code>downstream_cx_length_ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="server">server&lt;/h3>
&lt;p>Envoy 基础信息指标&lt;/p>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/statistics">Envoy 文档:server stats&lt;/a>&lt;/p>
&lt;p>利用率(Utilization):&lt;/p>
&lt;ul>
&lt;li>&lt;code>concurrency&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>错误(Error):&lt;/p>
&lt;ul>
&lt;li>&lt;code>days_until_first_cert_expiring&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="watch-dog">watch dog&lt;/h3>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/operations/performance">Envoy 文档: Watchdog&lt;/a>&lt;/p>
&lt;p>Envoy 还包括一个可配置的看门狗系统，它可以在 Envoy 没有响应时增加统计数据并选择性地终止服务器。 系统有两个独立的看门狗配置，一个用于主线程，一个用于工作线程； 因为不同的线程有不同的工作负载。 这些统计数据有助于从高层次上理解 Envoy 的事件循环是否因为它正在做太多工作、阻塞或没有被操作系统调度而没有响应。&lt;/p>
&lt;p>饱和度(Saturation):&lt;/p>
&lt;ul>
&lt;li>&lt;code>watchdog_mega_miss&lt;/code>(Counter): mega 未命中数&lt;/li>
&lt;li>&lt;code>watchdog_miss&lt;/code>(Counter): 未命中数&lt;/li>
&lt;/ul>
&lt;p>如果你对 watchdog 机制的兴趣，可以参考：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/envoyproxy/envoy/issues/11391">https://github.com/envoyproxy/envoy/issues/11391&lt;/a>
&lt;a href="https://github.com/envoyproxy/envoy/issues/11388">https://github.com/envoyproxy/envoy/issues/11388&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="event-loop">Event loop&lt;/h3>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/operations/performance">Envoy 文档: Event loop&lt;/a>&lt;/p>
&lt;p>Envoy 架构旨在通过在少量线程上运行事件循环来优化可扩展性和资源利用率。 &lt;code>“main”&lt;/code> 线程负责控制面处理，每个 &lt;code>“worker”&lt;/code> 线程分担数据面的一部分任务。 Envoy 公开了两个统计信息来监控所有这些线程事件循环的性能。&lt;/p>
&lt;p>跑一轮循环的耗时：事件循环的每次迭代都会执行一些任务。任务数量会随着负载的变化而变化。但是，如果一个或多个线程具有异常长尾循环执行耗时，则可能存在性能问题。例如，负责可能在工作线程之间分配不均，或者插件中可能存在长时间阻塞操作阻碍了任务进度。&lt;/p>
&lt;p>轮询延迟：在事件循环的每次迭代中，事件调度程序都会轮询 I/O 事件，并在某些 &lt;code>I/O 事件就绪&lt;/code> 或 发生 &lt;code>超时&lt;/code> 时 “唤醒” 线程，以先发生者为准。在 &lt;code>超时&lt;/code> 的情况下，我们可以测量轮询后预期唤醒时间与实际唤醒时间的差值；这种差异称为 “&lt;code>轮询延迟&lt;/code>”。看到一些小的 &lt;code>轮询延迟&lt;/code> 是正常的，通常等于内核调度程序的 “时间片(time slice”)” 或 “量子(quantum)” ——这取决于运行 Envoy 的操作系统 —— 但如果这个数字大大高于其正常观察到的基线，它表示内核调度程序可能发生延迟。&lt;/p>
&lt;p>可以通过将 &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/bootstrap/v3/bootstrap.proto#envoy-v3-api-field-config-bootstrap-v3-bootstrap-enable-dispatcher-stats">enable_dispatcher_stats&lt;/a> 设置为 &lt;code>true&lt;/code> 来启用这些统计信息。&lt;/p>
&lt;ul>
&lt;li>&lt;code>main&lt;/code> 线程的事件调度器有一个以 &lt;code>server.dispatcher.&lt;/code> 为根的统计树。&lt;/li>
&lt;li>每个 &lt;code>worker&lt;/code> 线程的事件调度器都有一个以 &lt;code>listener_manager.worker_&amp;lt;id&amp;gt;.dispatcher.&lt;/code> 为根的统计树。&lt;/li>
&lt;/ul>
&lt;p>每棵树都有以下统计信息：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>loop_duration_us&lt;/td>
&lt;td>Histogram&lt;/td>
&lt;td>以微秒为单位的事件循环持续时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>poll_delay_us&lt;/td>
&lt;td>Histogram&lt;/td>
&lt;td>以微秒为单位的轮询延迟&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>请注意，此处不包括任何辅助(非 main 与 worker)线程。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{hint}" data-lang="{hint}">Watch Dog 和 Event loop 都是解决与监控事件处理延迟与时效的工具，这里有很多细节和故事，甚至可以说到 Linux Kernel。希望本书后面有时间，可以和大家一起学习和分析这些有趣的细节。
&lt;/code>&lt;/pre>&lt;h2 id="配置说明">配置说明&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-{hint}" data-lang="{hint}">本节参考：
[Envoy 文档](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto)
&lt;/code>&lt;/pre>&lt;h3 id="configbootstrapv3bootstrap">config.bootstrap.v3.Bootstrap&lt;/h3>
&lt;p>&lt;a href="https://github.com/envoyproxy/envoy/blob/255af425e1d51066cc8b69a39208b70e18d07073/api/envoy/config/bootstrap/v3/bootstrap.proto#L44">Envoy 文档:config.bootstrap.v3.Bootstrap proto&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;node&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;static_resources&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;dynamic_resources&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cluster_manager&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stats_sinks&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stats_config&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stats_flush_interval&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stats_flush_on_admin&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-{hint}" data-lang="{hint}">什么是 `stats sink`？ 本书不作说明。Istio 默认没定制相关配置。以下只说关注的部分配置。
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>stats_config
(&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#envoy-v3-api-msg-config-metrics-v3-statsconfig">config.metrics.v3.StatsConfig&lt;/a>) 用于内部处理统计信息的配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stats_flush_interval
(&lt;a href="https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration">Duration&lt;/a>) 刷新 &lt;code>stats sink&lt;/code> 的时间间隔。。出于性能原因，Envoy 不会实时刷新 counter ，仅定期刷新 counter 和 gauge 。 如果未指定，则默认值为 5000 毫秒。 &lt;code>stats_flush_interval&lt;/code> 或 &lt;code>stats_flush_on_admin&lt;/code> 只能设置之一。 Duration 必须至少为 1 毫秒，最多为 5 分钟。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stats_flush_on_admin
(&lt;a href="https://developers.google.com/protocol-buffers/docs/proto#scalar">bool&lt;/a>) 仅当在 &lt;code>管理界面(admin interface)&lt;/code> 上查询时才将统计信息刷新到 &lt;code>sink&lt;/code>。 如果设置，则不会创建刷新计时器。 只能设置 &lt;code>stats_flush_on_admin&lt;/code> 或 &lt;code>stats_flush_interval&lt;/code> 之一。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="configmetricsv3statsconfig">config.metrics.v3.StatsConfig&lt;/h3>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#config-metrics-v3-statsconfig">Envoy 文档:config-metrics-v3-statsconfig&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stats_tags&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;use_all_default_tags&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stats_matcher&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;histogram_bucket_settings&amp;#34;&lt;/span>: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>stats_tags - 维度提取规则(对应 Prometheus 的 label 提取)
(&lt;strong>多个&lt;/strong> &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#envoy-v3-api-msg-config-metrics-v3-tagspecifier">config.metrics.v3.TagSpecifier&lt;/a> ) 每个 &lt;code>指标名称字符串&lt;/code> 都通过这些标签规则独立处理。 当一个标签匹配时，第一个捕获组不会立即从名称中删除，所以后面的 &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#envoy-v3-api-msg-config-metrics-v3-tagspecifier">TagSpecifiers&lt;/a> 也可以重复匹配同一部分。在完成所有标签匹配后，再剪裁 &lt;code>指标名称字符串&lt;/code> 的匹配部分，并作为 &lt;code>stats sink&lt;/code> 的指标名，例如 Prometheus的指标名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>use_all_default_tags
(BoolValue) 使用 Envoy 中指定的所有默认标签正则表达式。 这些可以与 stats_tags 中指定的自定义标签结合使用。 它们将在自定义标签之前进行处理。Istio 默认为 false.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stats_matcher
(&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#envoy-v3-api-msg-config-metrics-v3-statsmatcher">config.metrics.v3.StatsMatcher&lt;/a>) 指定 Envoy 要产出哪些指标。支持 &lt;code>包含&lt;/code>/&lt;code>排除&lt;/code> 规则指定。 如果未提供，则所有指标都将产出。 阻止某些指标集的统计可以提高一点 Envoy 运行性能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="configmetricsv3statsmatcher">config.metrics.v3.StatsMatcher&lt;/h3>
&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#config-metrics-v3-statsmatcher">Envoy 文档:config-metrics-v3-statsmatcher&lt;/a>&lt;/p>
&lt;p>用于禁用/开启统计指标计算与产出的配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;reject_all&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;exclusion_list&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;inclusion_list&amp;#34;&lt;/span>: {&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>reject_all
(&lt;a href="https://developers.google.com/protocol-buffers/docs/proto#scalar">bool&lt;/a>) 如果 &lt;code>reject_all&lt;/code> 为 true ，则禁用所有统计信息。 如果 &lt;code>reject_all&lt;/code> 为 false，则启用所有统计信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>exclusion_list
(&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/type/matcher/v3/string.proto#envoy-v3-api-msg-type-matcher-v3-liststringmatcher">type.matcher.v3.ListStringMatcher&lt;/a>) 排除列表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>inclusion_list
(&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/type/matcher/v3/string.proto#envoy-v3-api-msg-type-matcher-v3-liststringmatcher">type.matcher.v3.ListStringMatcher&lt;/a>) 包含列表&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-{note}" data-lang="{note}">本节参考了： https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/statistics
下一节，将以 Istio 如何使用上面的配置为例，举例说明。
&lt;/code>&lt;/pre></description></item><item><title>Blog: 深入Istio系列-组件详解</title><link>https://sreionet.github.io/blog/2022/09/12/6be15f/</link><pubDate>Mon, 12 Sep 2022 08:19:28 +0800</pubDate><guid>https://sreionet.github.io/blog/2022/09/12/6be15f/</guid><description>
&lt;p>在前两篇博客中：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://sreionet.github.io/posts/fe0ba1/">Istio 中的 Sidecar 注入、透明流量劫持及流量路由过程详解&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sreionet.github.io/posts/61aaaf/">Sidecar 中的流量类型及 iptables 规则详解&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>我向你详细介绍了 Istio 数据平面中的流量，但数据平面并不能孤立的存在，本文将向你展示 Istio 中的控制平面和数据平面各组件的端口及其功能，有助于你了解这些流量之间的关系及故障排查。&lt;/p>
&lt;h2 id="istio-中的组件及端口示意图">Istio 中的组件及端口示意图&lt;/h2>
&lt;p>按照习惯，我们首先展示一个全局示意图。下图展示的是 Istio 数据平面中 sidecar 的组成，以及与其交互的对象。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145000.png" alt="Istio sidecar 组成示意图">&lt;/p>
&lt;p>我们可以使用 &lt;code>nsenter&lt;/code> 命令进入Bookinfo 示例的 &lt;code>productpage&lt;/code> Pod的网络空间，查看其内部监听的端口信息。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145055.png" alt="Istio sidecar 中监听的端口信息">&lt;/p>
&lt;p>从图中我们可以看到除了 &lt;code>productpage&lt;/code> 应用本身监听的 9080 端口以外，Sidecar 容器还有监听大量的其他端口，如 &lt;code>15000&lt;/code>、&lt;code>15001&lt;/code>、&lt;code>15004&lt;/code>、&lt;code>15006&lt;/code>、&lt;code>15021&lt;/code>、&lt;code>15090&lt;/code> 等，你可以在 &lt;a href="https://istio.io/latest/docs/ops/deployment/requirements/">Istio 文档&lt;/a>上了解 Istio 中使用的端口。&lt;/p>
&lt;p>我们再进入 &lt;code>productpage&lt;/code> Pod 中，使用 &lt;code>lsof -i&lt;/code> 命令查看它打开的端口，如下图所示。&lt;/p>
&lt;p>!&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145153.png" alt="">&lt;/p>
&lt;p>我们可以看到其中有 &lt;code>pilot-agent&lt;/code> 与 &lt;code>istiod&lt;/code> 建立了 TCP 连接，上文中所述的监听中的端口，还有在 Pod 内部建立的 TCP 连接，这些连接对应了文章开头的示意图。&lt;/p>
&lt;p>Sidecar 容器（&lt;code>istio-proxy&lt;/code> ）的根进程是 &lt;code>pilot-agent&lt;/code>，启动命令如下图所示：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145247.png" alt="">&lt;/p>
&lt;p>从图中我们可以看到，它 &lt;code>pilot-agent&lt;/code> 进程的 PID 是 1，是它拉起了 &lt;code>envoy&lt;/code> 进程。&lt;/p>
&lt;p>在 &lt;code>istiod&lt;/code> 的 Pod 中查看它打开的端口，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145322.png" alt="">&lt;/p>
&lt;p>我们可以看到其中的监听的端口、进程间和远程通信连接。&lt;/p>
&lt;h2 id="istio-中各端口的功能概述">Istio 中各端口的功能概述&lt;/h2>
&lt;p>这些端口在你进行问题排查时可以起着举足轻重的作用。下面将根据端口所在的组件和功能分类描述。&lt;/p>
&lt;h2 id="istiod-中的端口">Istiod 中的端口&lt;/h2>
&lt;p>Istiod 中的端口相对比较少且功能单一：&lt;/p>
&lt;ul>
&lt;li>9876：ControlZ 用户界面，暴露 &lt;code>istiod&lt;/code> 的进程信息&lt;/li>
&lt;li>8080：&lt;code>istiod&lt;/code> 调试端口，通过该端口可以查询网格的配置和状态信息&lt;/li>
&lt;li>15010：暴露 xDS API 和颁发纯文本证书&lt;/li>
&lt;li>15012：功能同 15010 端口，但使用 TLS 通信&lt;/li>
&lt;li>15014：暴露控制平面的指标给 Prometheus&lt;/li>
&lt;li>15017：Sidecar 注入和配置校验端口&lt;/li>
&lt;/ul>
&lt;h2 id="sidecar-中的端口">Sidecar 中的端口&lt;/h2>
&lt;p>从上文中，我们看到 sidecar 中有众多端口：&lt;/p>
&lt;ul>
&lt;li>15000：Envoy &lt;a href="https://jimmysong.io/envoy-handbook/admin-interface/enabling-admin-interface.html">管理接口&lt;/a>，你可以用它来查询和修改 Envoy 代理的的配置，详情请参考 &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/operations/admin">Envoy 文档&lt;/a>。&lt;/li>
&lt;li>15001：用于处理出站流量。&lt;/li>
&lt;li>15004：调试端口，将在下文中解释。&lt;/li>
&lt;li>15006：用于处理入站流量。&lt;/li>
&lt;li>15020：汇总统计数据，对 Envoy 和 DNS 代理进行健康检查，调试 &lt;code>pilot-agent&lt;/code> 进程，将在下文中详细解释。&lt;/li>
&lt;li>15021：用于 sidecar 健康检查，以判断已注入 Pod 是否准备好接收流量。我们在该端口的 &lt;code>/healthz/ready&lt;/code> 路径上设置了就绪探针，Istio 把 sidecar 的就绪检测交给了 &lt;code>kubelet&lt;/code>，最大化利用 Kubernetes 平台自身的功能。&lt;code>envoy&lt;/code> 进程将健康检查路由到 &lt;code>pilot-agent&lt;/code> 进程的 15020 端口，实际的健康检查将发生在那里。&lt;/li>
&lt;li>15053：本地 DNS 代理，用于解析 Kubernetes DNS 解析不了的集群内部域名的场景。&lt;/li>
&lt;li>15090：Envoy Prometheus 查询端口，&lt;code>pilot-agent&lt;/code> 将通过此端口收集统计信息。&lt;/li>
&lt;/ul>
&lt;p>以上端口可以分为以下几类：&lt;/p>
&lt;ul>
&lt;li>负责进程间通信，例如 15001、15006、15053&lt;/li>
&lt;li>负责健康检查和信息统计，例如 150021、15090&lt;/li>
&lt;li>调试：15000、15004&lt;/li>
&lt;/ul>
&lt;p>下文将对几个重点端口详解。&lt;/p>
&lt;h2 id="15000-端口">15000 端口&lt;/h2>
&lt;p>15000 是 Envoy 的 Admin 接口，该接口允许我们修改 Envoy，并获得一个视图和查询指标和配置。&lt;/p>
&lt;p>管理接口由一个具有多个端点的 REST API 和一个简单的用户界面组成，你可以使用下面的命令开启 &lt;code>productpage&lt;/code> Pod 中的 Envoy 管理接口视图。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl -n default port-forward deploy/productpage-v1 &lt;span style="color:#ae81ff">15000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器中访问 &lt;code>http://localhost:15000&lt;/code>，你将看到 Envoy Admin 界面如下图所示。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145353.png" alt="">&lt;/p>
&lt;h2 id="15004-端口">15004 端口&lt;/h2>
&lt;p>通过 &lt;code>pilot-agent&lt;/code> 代理 &lt;code>istiod&lt;/code> 8080 端口上的调试端点，你可以进入数据平面 Pod 中访问 localhost 的 15004 端口查询网格信息，其效果与下面的 8080 端口等同。&lt;/p>
&lt;h2 id="8080-端口">8080 端口&lt;/h2>
&lt;p>你还可以在本地转发 &lt;code>istiod&lt;/code> 8080 端口，请运行下面的命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl -n istio-system port-forward deploy/istiod &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器中访问 &lt;code>http://localhost:8080/debug&lt;/code>，你将看到调试端点，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145416.png" alt="">&lt;/p>
&lt;p>当然，这只是一种获取网格信息和调试网格的方式，你还可以使用 &lt;code>istioctl&lt;/code> 命令或 Kiali 来调试，那样将更加高效和直观。&lt;/p>
&lt;h2 id="15020-端口">15020 端口&lt;/h2>
&lt;p>15020 端口有三大功能：&lt;/p>
&lt;ol>
&lt;li>汇总统计数据：查询 15090 端口获取 &lt;code>envoy&lt;/code> 的指标，也可以配置查询应用程序的指标，将 &lt;code>envoy&lt;/code>、应用程序和自身的指标汇总以供 Prometheus 收集。对应的调试端点是 &lt;code>/stats/prometheus&lt;/code>。&lt;/li>
&lt;li>对 Envoy 和 DNS 代理进行健康检查：对应的调试端点是 &lt;code>/healthz/ready&lt;/code> 和 &lt;code>/app-health&lt;/code>。&lt;/li>
&lt;li>调试 &lt;code>pilot-agent&lt;/code> 进程：对应的调试端点是 &lt;code>/quitquitquit&lt;/code>、&lt;code>debug/ndsz&lt;/code> 和 &lt;code>/debug/pprof&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>下图展示的是使用本地端口转发后，在浏览器中打开 &lt;code>http://localhost:15020/debug/pprof&lt;/code> 看到的调试信息。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145443.png" alt="">&lt;/p>
&lt;p>图中信息展示的是 &lt;code>pilot-agent&lt;/code> 的堆栈信息。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>通过对 Istio 中各组件端口的了解，你应该对 Istio 中各组件的关系及其内部流量有了更进一步的认识，熟悉这些端口的功能，有助于对网格的故障排除。&lt;/p></description></item><item><title>Blog: 深入Istio系列-Sidecar 中的流量类型及 iptables 规则详解</title><link>https://sreionet.github.io/blog/2022/09/11/61aaaf/</link><pubDate>Sun, 11 Sep 2022 14:56:39 +0800</pubDate><guid>https://sreionet.github.io/blog/2022/09/11/61aaaf/</guid><description>
&lt;p>我在&lt;a href="https://sreionet.github.io/posts/fe0ba1/">之前的一篇博客中&lt;/a>讲解过 Istio 中 sidecar 的注入、使用 iptables 进行透明流量拦截及流量路由的详细过程，并以 Bookinfo 示例中的 &lt;code>productpage&lt;/code> 服务访问 &lt;code>reviews&lt;/code> 服务，和 &lt;code>reviews&lt;/code> 服务访问 &lt;code>ratings&lt;/code> 服务为例绘制了透明流量劫持示意图。在那个示意图中仅展示了 &lt;code>reviews&lt;/code> pod 接收流量和对外访问的路由，实际上 sidecar 内的流量远不止于此。&lt;/p>
&lt;h2 id="istio_output-规则">ISTIO_OUTPUT 规则&lt;/h2>
&lt;p>在所有的 iptables 调用链中最复杂的一个是 &lt;code>ISTIO_OUTPUT&lt;/code>，其中共有 9 条规则如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Rule&lt;/strong>&lt;/th>
&lt;th>&lt;strong>target&lt;/strong>&lt;/th>
&lt;th>&lt;strong>in&lt;/strong>&lt;/th>
&lt;th>&lt;strong>out&lt;/strong>&lt;/th>
&lt;th>&lt;strong>source&lt;/strong>&lt;/th>
&lt;th>&lt;strong>destination&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>127.0.0.6&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>localhost&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>ISTIO_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>本文将向你展示 Istio sidecar 中的六种流量类型及其 iptables 规则， 以示意图的形式带你一览其全貌，其中详细指出了路由具体使用的是 &lt;code>ISTIO_OUTPUT&lt;/code> 中的哪一条规则。&lt;/p>
&lt;h2 id="sidecar-中的-iptables-流量路由">Sidecar 中的 iptables 流量路由&lt;/h2>
&lt;p>Sidecar 中的流量可以划分为以下几类：&lt;/p>
&lt;ul>
&lt;li>远程服务访问本地服务：Remote Pod -&amp;gt; Local Pod&lt;/li>
&lt;li>本地服务访问远程服务：Local Pod -&amp;gt; Remote Pod&lt;/li>
&lt;li>Prometheus 抓取本地服务的 metrics：Prometheus -&amp;gt; Local Pod&lt;/li>
&lt;li>本地 Pod 服务间的流量：Local Pod -&amp;gt; Local Pod&lt;/li>
&lt;li>Envoy 内部的进程间 TCP 流量&lt;/li>
&lt;li>Sidecar 到 Istiod 的流量&lt;/li>
&lt;/ul>
&lt;p>下面将依次解释每个场景下 Sidecar 内的 iptables 路由规则。&lt;/p>
&lt;h2 id="类型一remote-pod---local-pod">类型一：Remote Pod -&amp;gt; Local Pod&lt;/h2>
&lt;p>以下是远程服务、应用或客户端访问数据平面本地 Pod IP 的 iptables 规则。&lt;/p>
&lt;p>Remote Pod -&amp;gt; &lt;code>RREROUTING&lt;/code> -&amp;gt; &lt;code>ISTIO_INBOUND&lt;/code> -&amp;gt; &lt;code>ISTIO_IN_REDIRECT&lt;/code> -&amp;gt; Envoy 15006（Inbound）-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 1&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Local Pod&lt;/p>
&lt;p>我们看到流量只经过一次 Envoy 15006 Inbound 端口。这种场景下的 iptables 规则的示意图如下。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145739.png" alt="">&lt;/p>
&lt;h2 id="类型二local-pod---remote-pod">类型二：Local Pod -&amp;gt; Remote Pod&lt;/h2>
&lt;p>以下是本地 Pod IP 访问远程服务经过的 iptables 规则。&lt;/p>
&lt;p>Local Pod-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 9&lt;/strong> -&amp;gt; ISTIO_REDIRECT -&amp;gt; Envoy 15001（Outbound）-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 4&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Remote Pod&lt;/p>
&lt;p>我们看到流量只经过 Envoy 15001 Outbound 端口。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145841.png" alt="">&lt;/p>
&lt;p>以上两种场景中的流量都只经过一次 Envoy，因为该 Pod 中只有发出或接受请求一种场景发生。&lt;/p>
&lt;h2 id="类型三prometheus---local-pod">类型三：Prometheus -&amp;gt; Local Pod&lt;/h2>
&lt;p>Prometheus 抓取数据平面 metrics 的流量不会也无须经过 Envoy 代理。&lt;/p>
&lt;p>这些流量通过的 iptables 规则如下。&lt;/p>
&lt;p>Prometheus-&amp;gt; &lt;code>RREROUTING&lt;/code> -&amp;gt; &lt;code>ISTIO_INBOUND&lt;/code>（对目的地为 15002、15090 端口流量将转到 &lt;code>INPUT&lt;/code>）-&amp;gt; &lt;code>INPUT&lt;/code> -&amp;gt; Local Pod&lt;/p>
&lt;p>这种场景下的 iptables 规则的示意图如下。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145903.png" alt="">&lt;/p>
&lt;h2 id="类型四local-pod---local-pod">类型四：Local Pod -&amp;gt; Local Pod&lt;/h2>
&lt;p>一个 Pod 可能同时存在两个或多个服务，如果 Local Pod 访问的服务也在该当前 Pod 上，流量会依次经过 Envoy 15001 和 Envoy 15006 端口最后到达本地 Pod 的服务端口上。&lt;/p>
&lt;p>这些流量通过的 iptables 规则如下。&lt;/p>
&lt;p>Local Pod-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 9&lt;/strong> -&amp;gt; &lt;code>ISTIO_REDIRECT&lt;/code> -&amp;gt; Envoy 15001（Outbound）-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 2&lt;/strong> -&amp;gt; &lt;code>ISTIO_IN_REDIRECT&lt;/code> -&amp;gt; Envoy 15006（Inbound）-&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 1&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Local Pod&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145924.png" alt="">&lt;/p>
&lt;h2 id="类型五envoy-内部的进程间-tcp-流量">类型五：Envoy 内部的进程间 TCP 流量&lt;/h2>
&lt;p>Envoy 内部进程的 UID 和 GID 为 1337，它们之间的流量将使用 lo 网卡，使用 localhost 域名来通信。&lt;/p>
&lt;p>这些流量通过的 iptables 规则如下。&lt;/p>
&lt;p>Envoy 进程（Localhost） -&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 8&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Envoy 进程（Localhost）&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913145940.png" alt="">&lt;/p>
&lt;h2 id="类型六sidecar-到-istiod-的流量">类型六：Sidecar 到 Istiod 的流量&lt;/h2>
&lt;p>Sidecar 需要访问 Istiod 以同步配置，&lt;code>pilot-agent&lt;/code> 进程会向 Istiod 发送请求，以同步配置。&lt;/p>
&lt;p>这些流量通过的 iptables 规则如下。&lt;/p>
&lt;p>&lt;code>pilot-agent&lt;/code> 进程 -&amp;gt; &lt;code>OUTPUT&lt;/code> -&amp;gt; &lt;strong>&lt;code>Istio_OUTPUT&lt;/code> RULE 9&lt;/strong> -&amp;gt; Envoy 15001 (Outbound Handler) -&amp;gt; OUTPUT -&amp;gt; &lt;strong>&lt;code>ISTIO_OUTPUT&lt;/code> RULE 4&lt;/strong> -&amp;gt; &lt;code>POSTROUTING&lt;/code> -&amp;gt; Istiod&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913150048.png" alt="">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Istio 注入在 Pod 内或虚拟机中安装的所有 sidecar 代理组成了服务网格的数据平面，也是 Istio 的主要工作负载所在地，通过 &lt;a href="https://sreionet.github.io/posts/fe0ba1/">Istio 中的透明流量劫持&lt;/a> 及这篇博客，相信你一定对 sidecar 代理中的流量有了一个深刻的了解，但这还只是管中窥豹，略见一斑，在我的&lt;a href="https://sreionet.github.io/posts/6be15f/">下一篇博客&lt;/a>中，我将带你了解 Envoy 中各个组件的端口及其功能，这样可以让我们对 Istio 中的流量有一个更全面的了解。&lt;/p></description></item><item><title>Blog: 深入Istio系列-Sidecar 注入、透明流量劫持及流量路由过程详解</title><link>https://sreionet.github.io/blog/2022/09/11/fe0ba1/</link><pubDate>Sun, 11 Sep 2022 14:26:02 +0800</pubDate><guid>https://sreionet.github.io/blog/2022/09/11/fe0ba1/</guid><description>
&lt;p>本文最早是基于 Istio 1.11 撰写，之后随着 Istio 的版本陆续更新，最新更新时间为 2022 年 5 月 12 日，关于本文历史版本的更新说明请见文章最后。本文记录了详细的实践过程，力图能够让读者复现，因此事无巨细，想要理解某个部分过程的读者可以使用目录跳转到对应的小节阅读。&lt;/p>
&lt;p>为了理解本文希望你先阅读以下内容：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://sreionet.github.io/posts/b7e1eb/">理解 iptables&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sreionet.github.io/posts/dc5625/">Istio 数据平面 Pod 启动过程详解&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="内容介绍">内容介绍&lt;/h2>
&lt;p>本文基于 Istio 1.13 版本，将为大家介绍以下内容：&lt;/p>
&lt;ul>
&lt;li>什么是 sidecar 模式和它的优势在哪里。&lt;/li>
&lt;li>Istio 中是如何做 sidecar 注入的。&lt;/li>
&lt;li>Sidecar 代理是如何做透明流量劫持的。&lt;/li>
&lt;li>iptables 的路由规则。&lt;/li>
&lt;li>Envoy 代理是如何路由流量到上游的。&lt;/li>
&lt;/ul>
&lt;p>请大家结合下图理解本文中的内容，本图基于 Istio 官方提供的 Bookinfo 示例绘制，展示的是 &lt;code>reviews&lt;/code> Pod 的内部结构，包括 Linux Kernel 空间中的 iptables 规则、Sidecar 容器、应用容器。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913144220.png" alt="Istio 流量劫持示意图">&lt;/p>
&lt;p>&lt;code>productpage&lt;/code> 访问 &lt;code>reviews&lt;/code> Pod，入站流量处理过程对应于图示上的步骤：1、2、3、4、Envoy Inbound Handler、5、6、7、8、应用容器。&lt;/p>
&lt;p>&lt;code>reviews&lt;/code> Pod 访问 &lt;code>rating&lt;/code> 服务的出站流量处理过程对应于图示上的步骤是：9、10、11、12、Envoy Outbound Handler、13、14、15。&lt;/p>
&lt;p>注意：图中的路径 16 近用于路由规则说明，它不不出现在当前示例中。实际上仅当 Pod 内发出的对当前 Pod 内的服务访问的时候才会途径它。&lt;/p>
&lt;p>上图中关于流量路由部分，包含：&lt;/p>
&lt;ul>
&lt;li>&lt;code>productpage&lt;/code> 服务请求访问 &lt;code>http://reviews.default.svc.cluster.local:9080/&lt;/code>，当流量进入 &lt;code>reviews&lt;/code> Pod 内部时，流量是如何被 iptables 劫持到 Envoy 代理被 Inbound Handler 处理的；&lt;/li>
&lt;li>&lt;code>reviews&lt;/code> 请求访问 &lt;code>ratings&lt;/code> 服务的 Pod，应用程序发出的出站流量被 iptables 劫持到 Envoy 代理的 Outbound Handler 的处理。&lt;/li>
&lt;/ul>
&lt;p>在阅读下文时，请大家确立以下已知点：&lt;/p>
&lt;ul>
&lt;li>首先，&lt;code>productpage&lt;/code> 发出的对 &lt;code>reivews&lt;/code> 的访问流量，是在 Envoy 已经通过 EDS 选择出了要请求的 &lt;code>reviews&lt;/code> 服务的某个 Pod，知晓了其 IP 地址，直接向该 IP 发送的 TCP 连接请求。&lt;/li>
&lt;li>&lt;code>reviews&lt;/code> 服务有三个版本，每个版本有一个实例，三个版本中的 sidecar 工作步骤类似，下文只以其中一个 Pod 中的 sidecar 流量转发步骤来说明。&lt;/li>
&lt;li>所有进入 &lt;code>reviews&lt;/code> Pod 的 TCP 流量都根据 Pod 中的 iptables 规则转发到了 Envoy 代理的 15006 端口，然后经过 Envoy 的处理确定转发给 Pod 内的应用容器还是透传。&lt;/li>
&lt;/ul>
&lt;h2 id="sidecar-模式">Sidecar 模式&lt;/h2>
&lt;p>将应用程序的功能划分为单独的进程运行在同一个最小调度单元中（例如 Kubernetes 中的 Pod）可以被视为 &lt;strong>sidecar 模式&lt;/strong>。如下图所示，sidecar 模式允许您在应用程序旁边添加更多功能，而无需额外第三方组件配置或修改应用程序代码。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913144314.png" alt="">&lt;/p>
&lt;p>就像连接了 Sidecar 的三轮摩托车一样，在软件架构中， Sidecar 连接到父应用并且为其添加扩展或者增强功能。Sidecar 应用与主应用程序松散耦合。它可以屏蔽不同编程语言的差异，统一实现微服务的可观察性、监控、日志记录、配置、断路器等功能。&lt;/p>
&lt;h3 id="使用-sidecar-模式的优势">使用 Sidecar 模式的优势&lt;/h3>
&lt;p>使用 sidecar 模式部署服务网格时，无需在节点上运行代理，但是集群中将运行多个相同的 sidecar 副本。在 sidecar 部署方式中，每个应用的容器旁都会部署一个伴生容器（如 Envoy 或 MOSN），这个容器称之为 sidecar 容器。Sidecar 接管进出应用容器的所有流量。在 Kubernetes 的 Pod 中，在原有的应用容器旁边注入一个 Sidecar 容器，两个容器共享存储、网络等资源，可以广义的将这个包含了 sidecar 容器的 Pod 理解为一台主机，两个容器共享主机资源。&lt;/p>
&lt;p>因其独特的部署结构，使得 sidecar 模式具有以下优势：&lt;/p>
&lt;ul>
&lt;li>将与应用业务逻辑无关的功能抽象到共同基础设施，降低了微服务代码的复杂度。&lt;/li>
&lt;li>因为不再需要编写相同的第三方组件配置文件和代码，所以能够降低微服务架构中的代码重复度。&lt;/li>
&lt;li>Sidecar 可独立升级，降低应用程序代码和底层平台的耦合度。&lt;/li>
&lt;/ul>
&lt;h2 id="sidecar-注入示例分析">Sidecar 注入示例分析&lt;/h2>
&lt;p>以 Istio 官方提供的 &lt;code>bookinfo&lt;/code> 中 &lt;code>productpage&lt;/code> 的 YAML 为例，关于 &lt;code>bookinfo&lt;/code> 应用的详细 YAML 配置请参考 &lt;a href="https://github.com/istio/istio/blob/master/samples/bookinfo/platform/kube/bookinfo.yaml">bookinfo.yaml&lt;/a>。&lt;/p>
&lt;p>下文将从以下几个方面讲解：&lt;/p>
&lt;ul>
&lt;li>Sidecar 容器的注入&lt;/li>
&lt;li>iptables 规则的创建&lt;/li>
&lt;li>路由的详细过程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">productpage-v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">productpage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">productpage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">productpage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">serviceAccountName&lt;/span>: &lt;span style="color:#ae81ff">bookinfo-productpage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">productpage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker.io/istio/examples-bookinfo-productpage-v1:1.15.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">imagePullPolicy&lt;/span>: &lt;span style="color:#ae81ff">IfNotPresent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">emptyDir&lt;/span>: {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再查看下 &lt;code>productpage&lt;/code> 容器的 &lt;a href="https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/Dockerfile">Dockerfile&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:3.7.4-slim&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> requirements.txt ./&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> test-requirements.txt ./&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> pip install --no-cache-dir -r test-requirements.txt&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> productpage.py /opt/microservices/&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> tests/unit/* /opt/microservices/&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> templates /opt/microservices/templates&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> static /opt/microservices/static&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> requirements.txt /opt/microservices/&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> flood_factor&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> FLOOD_FACTOR &lt;span style="color:#e6db74">${&lt;/span>flood_factor&lt;span style="color:#66d9ef">:-&lt;/span>0&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 9080&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /opt/microservices&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> python -m unittest discover&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">USER&lt;/span>&lt;span style="color:#e6db74"> 1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;productpage.py&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;9080&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到 &lt;code>Dockerfile&lt;/code> 中没有配置 &lt;code>ENTRYPOINT&lt;/code>，所以 &lt;code>CMD&lt;/code> 的配置 &lt;code>python productpage.py 9080&lt;/code> 将作为默认的 &lt;code>ENTRYPOINT&lt;/code>，记住这一点，再看下注入 sidecar 之后的配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们只截取其中与 &lt;code>productpage&lt;/code> 相关的 &lt;code>Deployment&lt;/code> 配置中的部分 YAML 配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker.io/istio/examples-bookinfo-productpage-v1:1.15.0&lt;/span> &lt;span style="color:#75715e"># 应用镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">productpage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">sidecar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">domain&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">$(POD_NAMESPACE).svc.cluster.local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">configPath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/etc/istio/proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">binaryPath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/usr/local/bin/envoy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">serviceCluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">productpage.$(POD_NAMESPACE)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">drainDuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">45s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">parentShutdownDuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">1m0s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">discoveryAddress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">istiod.istio-system.svc:15012&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">zipkinAddress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zipkin.istio-system:9411&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">proxyLogLevel=warning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">proxyComponentLogLevel=misc:error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">connectTimeout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">10s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">proxyAdminPort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;15000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">concurrency&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">controlPlaneAuthPolicy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">NONE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">dnsRefreshRate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">300s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">statusPort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;15020&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">trust-domain=cluster.local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">controlPlaneBootstrap=false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker.io/istio/proxyv2:1.5.1&lt;/span> &lt;span style="color:#75715e"># sidecar proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">istio-proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">15090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-envoy-prom&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">initContainers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">istio-iptables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">p&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;15001&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;15006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">u&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;1337&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">REDIRECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">15090&lt;/span>,&lt;span style="color:#ae81ff">15020&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker.io/istio/proxyv2:1.5.1&lt;/span> &lt;span style="color:#75715e"># init 容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">istio-init&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Istio 给应用 Pod 注入的配置主要包括：&lt;/p>
&lt;ul>
&lt;li>Init 容器 &lt;code>istio-init&lt;/code>：用于 pod 中设置 iptables 端口转发&lt;/li>
&lt;li>Sidecar 容器 &lt;code>istio-proxy&lt;/code>：运行 sidecar 代理，如 Envoy 或 MOSN。&lt;/li>
&lt;/ul>
&lt;h2 id="iptables-规则注入解析">iptables 规则注入解析&lt;/h2>
&lt;p>为了查看 iptables 配置，我们需要登陆到 sidecar 容器中使用 root 用户来查看，因为 &lt;code>kubectl&lt;/code> 无法使用特权模式来远程操作 docker 容器，所以我们需要登陆到 &lt;code>productpage&lt;/code> pod 所在的主机上使用 &lt;code>docker&lt;/code> 命令登陆容器中查看。&lt;/p>
&lt;p>如果您使用 minikube 部署的 Kubernetes，可以直接登录到 minikube 的虚拟机中并切换为 root 用户。查看 iptables 配置，列出 NAT（网络地址转换）表的所有规则，因为在 Init 容器启动的时候选择给 &lt;code>istio-iptables&lt;/code> 传递的参数中指定将入站流量重定向到 sidecar 的模式为 &lt;code>REDIRECT&lt;/code>，因此在 iptables 中将只有 NAT 表的规格配置，如果选择 &lt;code>TPROXY&lt;/code> 还会有 &lt;code>mangle&lt;/code> 表配置。&lt;code>iptables&lt;/code> 命令的详细用法请参考 &lt;a href="https://wangchujiang.com/linux-command/c/iptables.html">iptables&lt;/a> 命令。&lt;/p>
&lt;p>我们仅查看与 &lt;code>productpage&lt;/code> 有关的 iptables 规则如下，因为这些规则是运行在该容器特定的网络空间下，因此需要使用 &lt;code>nsenter&lt;/code> 命令进入其网络空间。进入的时候需要指定进程 ID（PID），因此首先我们需要找到 &lt;code>productpage&lt;/code> 容器的 PID。对于在不同平台上安装的 Kubernetes，查找容器的方式会略有不同，例如在 GKE 上，执行 &lt;code>docker ps -a&lt;/code> 命令是查看不到任何容器进程的。下面已 minikube 和 GKE 两个典型的平台为例，指导你如何进入容器的网络空间。&lt;/p>
&lt;h3 id="在-minikube-中查看容器中的-iptabes-规则">在 minikube 中查看容器中的 iptabes 规则&lt;/h3>
&lt;p>对于 minikube，因为所有的进程都运行在单个节点上，因此你只需要登录到 minikube 虚拟机，切换为 root 用户然后查找 &lt;code>productpage&lt;/code> 进程即可，参考下面的步骤。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 进入 minikube 并切换为 root 用户，minikube 默认用户为 docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ minikube ssh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo -i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 查看 productpage pod 的 istio-proxy 容器中的进程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker top &lt;span style="color:#e6db74">`&lt;/span>docker ps|grep &lt;span style="color:#e6db74">&amp;#34;istio-proxy_productpage&amp;#34;&lt;/span>|cut -d &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> -f1&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UID PID PPID C STIME TTY TIME CMD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#ae81ff">10576&lt;/span> &lt;span style="color:#ae81ff">10517&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 08:09 ? 00:00:07 /usr/local/bin/pilot-agent proxy sidecar --domain default.svc.cluster.local --configPath /etc/istio/proxy --binaryPath /usr/local/bin/envoy --serviceCluster productpage.default --drainDuration 45s --parentShutdownDuration 1m0s --discoveryAddress istiod.istio-system.svc:15012 --zipkinAddress zipkin.istio-system:9411 --proxyLogLevel&lt;span style="color:#f92672">=&lt;/span>warning --proxyComponentLogLevel&lt;span style="color:#f92672">=&lt;/span>misc:error --connectTimeout 10s --proxyAdminPort &lt;span style="color:#ae81ff">15000&lt;/span> --concurrency &lt;span style="color:#ae81ff">2&lt;/span> --controlPlaneAuthPolicy NONE --dnsRefreshRate 300s --statusPort &lt;span style="color:#ae81ff">15020&lt;/span> --trust-domain&lt;span style="color:#f92672">=&lt;/span>cluster.local --controlPlaneBootstrap&lt;span style="color:#f92672">=&lt;/span>false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#ae81ff">10660&lt;/span> &lt;span style="color:#ae81ff">10576&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 08:09 ? 00:00:33 /usr/local/bin/envoy -c /etc/istio/proxy/envoy-rev0.json --restart-epoch &lt;span style="color:#ae81ff">0&lt;/span> --drain-time-s &lt;span style="color:#ae81ff">45&lt;/span> --parent-shutdown-time-s &lt;span style="color:#ae81ff">60&lt;/span> --service-cluster productpage.default --service-node sidecar~172.17.0.16~productpage-v1-7f44c4d57c-ksf9b.default~default.svc.cluster.local --max-obj-name-len &lt;span style="color:#ae81ff">189&lt;/span> --local-address-ip-version v4 --log-format &lt;span style="color:#f92672">[&lt;/span>Envoy &lt;span style="color:#f92672">(&lt;/span>Epoch 0&lt;span style="color:#f92672">)]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>%Y-%m-%d %T.%e&lt;span style="color:#f92672">][&lt;/span>%t&lt;span style="color:#f92672">][&lt;/span>%l&lt;span style="color:#f92672">][&lt;/span>%n&lt;span style="color:#f92672">]&lt;/span> %v -l warning --component-log-level misc:error --concurrency &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 使用 nsenter 进入 sidecar 容器的命名空间（以上任何一个都可以）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ nsenter -n --target &lt;span style="color:#ae81ff">10660&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 查看 NAT 表中规则配置的详细信息。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ iptables -t nat -L
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="在-gke-中查看容器的-iptables-规则">在 GKE 中查看容器的 iptables 规则&lt;/h3>
&lt;p>如果你在 GKE 中安装的多节点的 Kubernetes 集群，首先你需要确定这个 Pod 运行在哪个节点上，然后登陆到那台主机，使用下面的命令查找进程的 PID，你会得到类似下面的输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ps aux|grep &lt;span style="color:#e6db74">&amp;#34;productpage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chronos &lt;span style="color:#ae81ff">4268&lt;/span> 0.0 0.6 &lt;span style="color:#ae81ff">43796&lt;/span> &lt;span style="color:#ae81ff">24856&lt;/span> ? Ss Apr22 0:00 python productpage.py &lt;span style="color:#ae81ff">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chronos &lt;span style="color:#ae81ff">4329&lt;/span> 0.9 0.6 &lt;span style="color:#ae81ff">117524&lt;/span> &lt;span style="color:#ae81ff">24616&lt;/span> ? Sl Apr22 13:43 /usr/local/bin/python /opt/microservices/productpage.py &lt;span style="color:#ae81ff">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root &lt;span style="color:#ae81ff">361903&lt;/span> 0.0 0.0 &lt;span style="color:#ae81ff">4536&lt;/span> &lt;span style="color:#ae81ff">812&lt;/span> pts/0 S+ 01:54 0:00 grep --colour&lt;span style="color:#f92672">=&lt;/span>auto productpage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在终端中输出 &lt;code>iptables -t nat -L&lt;/code> 即可查看 iptables 规则。&lt;/p>
&lt;h2 id="iptables-流量劫持过程详解">iptables 流量劫持过程详解&lt;/h2>
&lt;p>经过上面的步骤，你已经可以查看到 init 容器向 Pod 中注入的 iptables 规则，如下所示。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># PREROUTING 链：用于目标地址转换（DNAT），将所有入站 TCP 流量跳转到 ISTIO_INBOUND 链上。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain PREROUTING &lt;span style="color:#f92672">(&lt;/span>policy ACCEPT &lt;span style="color:#ae81ff">2701&lt;/span> packets, 162K bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2701&lt;/span> 162K ISTIO_INBOUND tcp -- any any anywhere anywhere
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT 链：处理输入数据包，非 TCP 流量将继续 OUTPUT 链。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain INPUT &lt;span style="color:#f92672">(&lt;/span>policy ACCEPT &lt;span style="color:#ae81ff">2701&lt;/span> packets, 162K bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT 链：将所有出站数据包跳转到 ISTIO_OUTPUT 链上。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain OUTPUT &lt;span style="color:#f92672">(&lt;/span>policy ACCEPT &lt;span style="color:#ae81ff">79&lt;/span> packets, &lt;span style="color:#ae81ff">6761&lt;/span> bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">900&lt;/span> ISTIO_OUTPUT tcp -- any any anywhere anywhere
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># POSTROUTING 链：所有数据包流出网卡时都要先进入 POSTROUTING 链，内核根据数据包目的地判断是否需要转发出去，我们看到此处未做任何处理。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain POSTROUTING &lt;span style="color:#f92672">(&lt;/span>policy ACCEPT &lt;span style="color:#ae81ff">79&lt;/span> packets, &lt;span style="color:#ae81ff">6761&lt;/span> bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ISTIO_INBOUND 链：将所有入站流量重定向到 ISTIO_IN_REDIRECT 链上。目的地为 15090（Prometheus 使用）和 15020（Ingress gateway 使用，用于 Pilot 健康检查）端口的流量除外，发送到以上两个端口的流量将返回 iptables 规则链的调用点，即 PREROUTING 链的后继 POSTROUTING 后直接调用原始目的地。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain ISTIO_INBOUND &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> references&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> RETURN tcp -- any any anywhere anywhere tcp dpt:ssh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">120&lt;/span> RETURN tcp -- any any anywhere anywhere tcp dpt:15090
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2699&lt;/span> 162K RETURN tcp -- any any anywhere anywhere tcp dpt:15020
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ISTIO_IN_REDIRECT tcp -- any any anywhere anywhere
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ISTIO_IN_REDIRECT 链：将所有的入站流量跳转到本地的 15006 端口，至此成功的拦截了流量到 sidecar 代理的 Inbound Handler 中。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain ISTIO_IN_REDIRECT &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> references&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> REDIRECT tcp -- any any anywhere anywhere redir ports &lt;span style="color:#ae81ff">15006&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ISTIO_OUTPUT 链：规则比较复杂，将在下文解释&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain ISTIO_OUTPUT &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> references&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> RETURN all -- any lo 127.0.0.6 anywhere &lt;span style="color:#75715e">#规则1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ISTIO_IN_REDIRECT all -- any lo anywhere !localhost owner UID match &lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#75715e">#规则2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> RETURN all -- any lo anywhere anywhere ! owner UID match &lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#75715e">#规则3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">900&lt;/span> RETURN all -- any any anywhere anywhere owner UID match &lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#75715e">#规则4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ISTIO_IN_REDIRECT all -- any lo anywhere !localhost owner GID match &lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#75715e">#规则5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> RETURN all -- any lo anywhere anywhere ! owner GID match &lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#75715e">#规则6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> RETURN all -- any any anywhere anywhere owner GID match &lt;span style="color:#ae81ff">1337&lt;/span> &lt;span style="color:#75715e">#规则7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> RETURN all -- any any anywhere localhost &lt;span style="color:#75715e">#规则8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ISTIO_REDIRECT all -- any any anywhere anywhere &lt;span style="color:#75715e">#规则9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ISTIO_REDIRECT 链：将所有流量重定向到 Envoy 代理的 15001 端口。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain ISTIO_REDIRECT &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> references&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> REDIRECT tcp -- any any anywhere anywhere redir ports &lt;span style="color:#ae81ff">15001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里着重需要解释的是 &lt;code>ISTIO_OUTPUT&lt;/code> 链中的 9 条规则，为了便于阅读，我将以上规则中的部分内容使用表格的形式来展示如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>规则&lt;/strong>&lt;/th>
&lt;th>&lt;strong>target&lt;/strong>&lt;/th>
&lt;th>&lt;strong>in&lt;/strong>&lt;/th>
&lt;th>&lt;strong>out&lt;/strong>&lt;/th>
&lt;th>&lt;strong>source&lt;/strong>&lt;/th>
&lt;th>&lt;strong>destination&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>127.0.0.6&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner UID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>ISTIO_IN_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>!localhost owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>lo&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere !owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere owner GID match 1337&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>RETURN&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>localhost&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>ISTIO_REDIRECT&lt;/td>
&lt;td>any&lt;/td>
&lt;td>any&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;td>anywhere&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>下图展示了 &lt;code>ISTIO_ROUTE&lt;/code> 规则的详细流程。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913144557.png" alt="">&lt;/p>
&lt;p>我将按照规则的出现顺序来解释每条规则的目的、对应文章开头图示中的步骤及详情。其中规则 5、6、7 是分别对规则 2、3、4 的应用范围扩大（从 UID 扩大为 GID），作用是类似的，将合并解释。注意，其中的规则是按顺序执行的，也就是说排序越靠后的规则将作为默认值。出站网卡（out）为 &lt;code>lo&lt;/code> （本地回环地址，loopback 接口）时，表示流量的目的地是本地 Pod，对于 Pod 向外部发送的流量就不会经过这个接口。所有 &lt;code>review&lt;/code> Pod 的出站流量只适用于规则 4、7、8、9。&lt;/p>
&lt;p>&lt;strong>规则 1&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>目的：&lt;strong>透传&lt;/strong> Envoy 代理发送到本地应用容器的流量，使其绕过 Envoy 代理，直达应用容器。&lt;/li>
&lt;li>对应图示中的步骤：6 到 7。&lt;/li>
&lt;li>详情：该规则使得所有来自 &lt;code>127.0.0.6&lt;/code>（该 IP 地址将在下文解释） 的请求，跳出该链，返回 iptables 的调用点（即 &lt;code>OUTPUT&lt;/code>）后继续执行其余路由规则，即 &lt;code>POSTROUTING&lt;/code> 规则，把流量发送到任意目的地址，如本地 Pod 内的应用容器。如果没有这条规则，由 Pod 内 Envoy 代理发出的对 Pod 内容器访问的流量将会执行下一条规则，即规则 2，流量将再次进入到了 Inbound Handler 中，从而形成了死循环。将这条规则放在第一位可以避免流量在 Inbound Handler 中死循环的问题。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>规则 2、5&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>目的：处理 Envoy 代理发出的站内流量（Pod 内部的流量），但不是对 localhost 的请求，通过后续规则将其转发给 Envoy 代理的 Inbound Handler。该规则适用于 Pod 对自身 IP 地址调用的场景，即 Pod 内服务之间的访问。&lt;/li>
&lt;li>详情：如果流量的目的地非 localhost，且数据包是由 1337 UID（即 &lt;code>istio-proxy&lt;/code> 用户，Envoy 代理）发出的，流量将被经过 &lt;code>ISTIO_IN_REDIRECT&lt;/code> 最终转发到 Envoy 的 Inbound Handler。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>规则 3、6&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>目的：&lt;strong>透传&lt;/strong> Pod 内的应用容器的站内流量。该规则适用于容器内部的流量。例如在 Pod 内对 Pod IP 或 localhost 的访问。&lt;/li>
&lt;li>对应图示中的步骤：6 到 7。&lt;/li>
&lt;li>详情：如果流量不是由 Envoy 用户发出的，那么就跳出该链，返回 &lt;code>OUTPUT&lt;/code> 调用 &lt;code>POSTROUTING&lt;/code>，直达目的地。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>规则 4、7&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>目的：&lt;strong>透传&lt;/strong> Envoy 代理发出的出站请求。&lt;/li>
&lt;li>对应图示中的步骤：14 到 15。&lt;/li>
&lt;li>详情：如果请求是由 Envoy 代理发出的，则返回 &lt;code>OUTPUT&lt;/code> 继续调用 &lt;code>POSTROUTING&lt;/code> 规则，最终直接访问目的地。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>规则 8&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>目的：&lt;strong>透传&lt;/strong> Pod 内部对 localhost 的请求。&lt;/li>
&lt;li>详情：如果请求的目的地是 localhost，则返回 OUTPUT 调用 &lt;code>POSTROUTING&lt;/code>，直接访问 localhost。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>规则 9&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>目的：所有其他的流量将被转发到 &lt;code>ISTIO_REDIRECT&lt;/code> 后，最终达到 Envoy 代理的 Outbound Handler。&lt;/li>
&lt;li>对应图示中的步骤：10 到 11。&lt;/li>
&lt;/ul>
&lt;p>以上规则避免了 Envoy 代理到应用程序的路由在 iptables 规则中的死循环，保障了流量可以被正确的路由到 Envoy 代理上，也可以发出真正的出站请求。&lt;/p>
&lt;p>&lt;strong>关于 RETURN target&lt;/strong>&lt;/p>
&lt;p>你可能留意到上述规则中有很多 RETURN target，它的意思是，指定到这条规则时，跳出该规则链，返回 iptables 的调用点（在我们的例子中即 &lt;code>OUTPUT&lt;/code>）后继续执行其余路由规则，在我们的例子中即 &lt;code>POSTROUTING&lt;/code> 规则，把流量发送到任意目的地址，你可以把它直观的理解为&lt;strong>透传&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>关于 127.0.0.6 IP 地址&lt;/strong>&lt;/p>
&lt;p>127.0.0.6 这个 IP 是 Istio 中默认的 &lt;code>InboundPassthroughClusterIpv4&lt;/code>，在 Istio 的代码中指定。即流量在进入 Envoy 代理后被绑定的 IP 地址，作用是让 Outbound 流量重新发送到 Pod 中的应用容器，即 &lt;strong>Passthought（透传），绕过 Outbound Handler&lt;/strong>。该流量是对 Pod 自身的访问，而不是真正的对外流量。至于为什么选择这个 IP 作为流量透传，请参考 &lt;a href="https://github.com/istio/istio/issues/29603">Istio Issue-29603&lt;/a>。&lt;/p>
&lt;h2 id="流量路由过程详解">流量路由过程详解&lt;/h2>
&lt;p>通过上文，你已经了解了 Istio 是如何在 Pod 中做透明流量劫持的，那么流量被劫持到 Envoy 代理中之后是如何被处理的呢？流量路由分为 Inbound 和 Outbound 两个过程，下面将根据上文中的示例及 sidecar 的配置为读者详细分析此过程。&lt;/p>
&lt;h3 id="理解-inbound-handler">理解 Inbound Handler&lt;/h3>
&lt;p>Inbound Handler 的作用是将 iptables 拦截到的 downstream 的流量转发给 Pod 内的应用程序容器。在我们的实例中，假设其中一个 Pod 的名字是 &lt;code>reviews-v1-545db77b95-jkgv2&lt;/code>，运行 &lt;code>istioctl proxy-config listener reviews-v1-545db77b95-jkgv2 --port 15006&lt;/code> 查看该 Pod 中 15006 端口上的监听器情况 ，你将看到下面的输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ADDRESS PORT MATCH DESTINATION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Addr: *:15006 Non-HTTP/Non-TCP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Trans: tls; App: istio-http/1.0,istio-http/1.1,istio-h2; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Trans: raw_buffer; App: http/1.1,h2c; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Trans: tls; App: TCP TLS; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Trans: raw_buffer; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Trans: tls; Addr: 0.0.0.0/0 InboundPassthroughClusterIpv4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Trans: tls; App: istio,istio-peer-exchange,istio-http/1.0,istio-http/1.1,istio-h2; Addr: *:9080 Cluster: inbound|9080||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">0.0.0.0 15006 Trans: raw_buffer; Addr: *:9080 Cluster: inbound|9080||&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面列出了以上输出中各字段的含义：&lt;/p>
&lt;ul>
&lt;li>ADDRESS：下游地址&lt;/li>
&lt;li>PORT：Envoy 监听器监听的端口&lt;/li>
&lt;li>MATCH：请求使用的传输协议或匹配的下游地址&lt;/li>
&lt;li>DESTINATION：路由目的地&lt;/li>
&lt;/ul>
&lt;p>&lt;code>reviews&lt;/code> Pod 中的 Iptables 将入站流量劫持到 15006 端口上，从上面的输出我们可以看到 Envoy 的 Inbound Handler 在 15006 端口上监听，对目的地为任何 IP 的 9080 端口的请求将路由到 &lt;code>inbound|9080||&lt;/code> Cluster 上。&lt;/p>
&lt;p>从该 Pod 的 Listener 列表的最后两行中可以看到，&lt;code>0.0.0.0:15006/TCP&lt;/code> 的 Listener（其实际名字是 &lt;code>virtualInbound&lt;/code>）监听所有的 Inbound 流量，其中包含了匹配规则，来自任意 IP 的对 &lt;code>9080&lt;/code> 端口的访问流量，将会路由到 &lt;code>inbound|9080||&lt;/code> Cluster，如果你想以 Json 格式查看该 Listener 的详细配置，可以执行 &lt;code>istioctl proxy-config listeners reviews-v1-545db77b95-jkgv2 --port 15006 -o json&lt;/code> 命令，你将获得类似下面的输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">/*省略部分内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;virtualInbound&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;address&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;socketAddress&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;address&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.0.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;portValue&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">15006&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filterChains&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">/*省略部分内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filterChainMatch&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;destinationPort&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">9080&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;transportProtocol&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tls&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;applicationProtocols&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;istio&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;istio-peer-exchange&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;istio-http/1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;istio-http/1.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;istio-h2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filters&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">/*省略部分内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;envoy.filters.network.http_connection_manager&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;typedConfig&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;statPrefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;inbound_0.0.0.0_9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;routeConfig&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;inbound|9080||&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;virtualHosts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;inbound|http|9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;domains&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;routes&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;match&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cluster&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;inbound|9080||&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;timeout&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxStreamDuration&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxStreamDuration&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;grpcTimeoutHeaderMax&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;decorator&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;operation&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;reviews.default.svc.cluster.local:9080/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;validateClusters&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">/*省略部分内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">/*省略部分内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;listenerFilters&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">/*省略部分内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;listenerFiltersTimeout&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;continueOnListenerFiltersTimeout&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trafficDirection&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;INBOUND&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>既然 Inbound Handler 的流量中将来自任意地址的对该 Pod &lt;code>9080&lt;/code> 端口的流量路由到 &lt;code>inbound|9080||&lt;/code> Cluster，那么我们运行 &lt;code>istioctl pc cluster reviews-v1-545db77b95-jkgv2 --port 9080 --direction inbound -o json&lt;/code> 查看下该 Cluster 配置，你将获得类似下面的输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;inbound|9080||&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ORIGINAL_DST&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;connectTimeout&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;10s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;lbPolicy&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;CLUSTER_PROVIDED&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;circuitBreakers&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;thresholds&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxConnections&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxPendingRequests&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxRequests&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxRetries&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackRemaining&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cleanupInterval&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;60s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;upstreamBindConfig&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sourceAddress&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;address&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;127.0.0.6&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;portValue&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;metadata&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filterMetadata&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;istio&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;services&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;host&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;reviews.default.svc.cluster.local&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;reviews&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;namespace&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看其中的 &lt;code>TYPE&lt;/code> 为 &lt;code>ORIGINAL_DST&lt;/code>，将流量发送到原始目标地址（Pod IP），因为原始目标地址即当前 Pod，你还应该注意到 &lt;code>upstreamBindConfig.sourceAddress.address&lt;/code> 的值被改写为了 &lt;code>127.0.0.6&lt;/code>，而且对于 Pod 内流量是通过 &lt;code>lo&lt;/code> 网卡发送的，这刚好呼应了上文中的 iptables &lt;code>ISTIO_OUTPUT&lt;/code> 链中的第一条规则，根据该规则，流量将被透传到 Pod 内的应用容器。&lt;/p>
&lt;h3 id="理解-outbound-handler">理解 Outbound Handler&lt;/h3>
&lt;p>在本示例中 &lt;code>reviews&lt;/code> 会向 &lt;code>ratings&lt;/code> 服务发送 HTTP 请求，请求的地址是：&lt;code>http://ratings.default.svc.cluster.local:9080/&lt;/code>，Outbound Handler 的作用是将 iptables 拦截到的本地应用程序向外发出的流量，经由 Envoy 代理路由到上游。&lt;/p>
&lt;p>Envoy 监听在 15001 端口上监听所有 Outbound 流量，Outbound Handler 处理，然后经过 &lt;code>virtualOutbound&lt;/code> Listener、&lt;code>0.0.0.0_9080&lt;/code> Listener，然后通过 Route 9080 找到上游的 cluster，进而通过 EDS 找到 Endpoint 执行路由动作。&lt;/p>
&lt;p>&lt;strong>&lt;code>ratings.default.svc.cluster.local:9080&lt;/code> 路由&lt;/strong>&lt;/p>
&lt;p>运行 &lt;code>istioctl proxy-config routes reviews-v1-545db77b95-jkgv2 --name 9080 -o json&lt;/code> 查看 route 配置，因为 sidecar 会根据 HTTP header 中的 domains 来匹配 VirtualHost，所以下面只列举了 &lt;code>ratings.default.svc.cluster.local:9080&lt;/code> 这一个 VirtualHost。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;virtualHosts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;domains&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings.default.svc.cluster.local&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings.default.svc.cluster.local:9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings:9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings.default.svc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings.default.svc:9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings.default&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ratings.default:9080&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;10.8.8.106&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;10.8.8.106:9080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;routes&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;match&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;route&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cluster&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;timeout&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;retryPolicy&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;retryOn&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;numRetries&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;retryHostPredicate&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;envoy.retry_host_predicates.previous_hosts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;hostSelectionRetryMaxAttempts&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;retriableStatusCodes&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">503&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxStreamDuration&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxStreamDuration&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;grpcTimeoutHeaderMax&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;decorator&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;operation&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ratings.default.svc.cluster.local:9080/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;includeRequestAttemptCount&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">/*省略部分内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;validateClusters&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从该 Virtual Host 配置中可以看到将流量路由到&lt;code>outbound|9080||ratings.default.svc.cluster.local&lt;/code> 集群。&lt;/p>
&lt;p>&lt;strong>&lt;code>outbound|9080||ratings.default.svc.cluster.local&lt;/code> 集群的端点&lt;/strong>&lt;/p>
&lt;p>运行 &lt;code>istioctl proxy-config endpoint reviews-v1-545db77b95-jkgv2 --port 9080 -o json --cluster &amp;quot;outbound|9080||ratings.default.svc.cluster.local&amp;quot;&lt;/code> 查看集群的 Endpoint 配置，结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;addedViaApi&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;hostStatuses&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;address&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;socketAddress&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;address&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;10.4.1.12&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;portValue&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">9080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stats&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cx_connect_fail&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cx_total&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rq_error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rq_success&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rq_timeout&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rq_total&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;GAUGE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cx_active&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;GAUGE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rq_active&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;healthStatus&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;edsHealthStatus&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;HEALTHY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;weight&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;locality&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;region&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;us-west2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;zone&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;us-west2-a&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;circuitBreakers&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;thresholds&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxConnections&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxPendingRequests&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxRequests&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxRetries&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4294967295&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;priority&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;HIGH&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxConnections&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1024&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxPendingRequests&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1024&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxRequests&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1024&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;maxRetries&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;observabilityName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;outbound|9080||ratings.default.svc.cluster.local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到端点的地址是 &lt;code>10.4.1.12&lt;/code>。实际上，Endpoint 可以是一个或多个，sidecar 将根据一定规则选择适当的 Endpoint 来路由。至此 &lt;code>review&lt;/code> Pod找到了它上游服务 &lt;code>rating&lt;/code> 的 Endpoint。&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>本文使用了 Istio 官方提供的 bookinfo 示例，按图索骥得带领读者了解了 sidecar 注入、iptables 透明流量劫持及 sidecar 中流量路由背后的实现细节。Sidecar 模式和流量透明劫持是 Istio 服务网格的特色和基础功能，理解该功能的背后过程及实现细节，将有助于大家理解 Service Mesh 的原理和 &lt;a href="https://www.servicemesher.com/istio-handbook/">Istio Handbook&lt;/a> 后面章节中的内容，因此希望读者可以在自己的环境中从头来试验一遍以加深理解。&lt;/p>
&lt;p>使用 iptables 做流量劫持只是 service mesh 的数据平面中做流量劫持的方式之一，还有更多的流量劫持方案，下面引用自 &lt;a href="https://mosn.io/docs/products/structure/traffic-hijack/">云原生网络代理 MOSN 官网中给出的流量劫持&lt;/a>部分的描述。&lt;/p>
&lt;h3 id="使用-iptables-做流量劫持时存在的问题">使用 iptables 做流量劫持时存在的问题&lt;/h3>
&lt;p>目前 Istio 使用 iptables 实现透明劫持，主要存在以下三个问题：&lt;/p>
&lt;ol>
&lt;li>需要借助于 conntrack 模块实现连接跟踪，在连接数较多的情况下，会造成较大的消耗，同时可能会造成 track 表满的情况，为了避免这个问题，业内有关闭 conntrack 的做法。&lt;/li>
&lt;li>iptables 属于常用模块，全局生效，不能显式的禁止相关联的修改，可管控性比较差。&lt;/li>
&lt;li>iptables 重定向流量本质上是通过 loopback 交换数据，outbond 流量将两次穿越协议栈，在大并发场景下会损失转发性能。&lt;/li>
&lt;/ol>
&lt;p>上述几个问题并非在所有场景中都存在，比方说某些场景下，连接数并不多，且 NAT 表未被使用到的情况下，iptables 是一个满足要求的简单方案。为了适配更加广泛的场景，透明劫持需要解决上述三个问题。&lt;/p>
&lt;h3 id="透明劫持方案优化">透明劫持方案优化&lt;/h3>
&lt;p>为了优化 Istio 中的透明流量劫持的性能，业界提出了以下方案。&lt;/p>
&lt;p>&lt;strong>使用 Merbridge 开源项目利用 eBPF 劫持流量&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://github.com/merbridge/merbridge">Merbridge&lt;/a> 是由 DaoCloud 在 2022 年初开源的的一款利用 eBPF 加速 Istio 服务网格的插件。使用 Merbridge 可以在一定程度上优化数据平面的网络性能。&lt;/p>
&lt;p>Merbridge 利用 eBPF 的 &lt;code>sockops&lt;/code> 和 &lt;code>redir&lt;/code> 能力，可以直接将数据包从 inbound socket 传输到 outbound socket。eBPF 提供了 &lt;code>bpf_msg_redirect_hash&lt;/code> 函数可以直接转发应用程序的数据包。&lt;/p>
&lt;p>详见 &lt;a href="https://jimmysong.io/istio-handbook/ecosystem/merbridge.html">Istio 服务网格 —— 云原生应用网络构建指南&lt;/a>。&lt;/p>
&lt;p>&lt;strong>使用 tproxy 处理 inbound 流量&lt;/strong>&lt;/p>
&lt;p>tproxy 可以用于 inbound 流量的重定向，且无需改变报文中的目的 IP/端口，不需要执行连接跟踪，不会出现 conntrack 模块创建大量连接的问题。受限于内核版本，tproxy 应用于 outbound 存在一定缺陷。目前 Istio 支持通过 tproxy 处理 inbound 流量。&lt;/p>
&lt;p>&lt;strong>使用 hook connect 处理 outbound 流量&lt;/strong>&lt;/p>
&lt;p>为了适配更多应用场景，outbound 方向通过 hook connect 来实现，实现原理如下：&lt;/p>
&lt;figure>
&lt;img src="hook-connect.svg"
alt="hook-connect 原理示意图" width="50%"/> &lt;figcaption>
&lt;h4>hook-connect 原理示意图&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>无论采用哪种透明劫持方案，均需要解决获取真实目的 IP/端口的问题，使用 iptables 方案通过 getsockopt 方式获取，tproxy 可以直接读取目的地址，通过修改调用接口，hook connect 方案读取方式类似于 tproxy。&lt;/p>
&lt;p>实现透明劫持后，在内核版本满足要求（4.16以上）的前提下，通过 sockmap 可以缩短报文穿越路径，进而改善 outbound 方向的转发性能。&lt;/p>
&lt;h2 id="更新说明">更新说明&lt;/h2>
&lt;p>下面是本文的几次更新说明。&lt;/p>
&lt;p>&lt;strong>2020 年 4 月 27 日，第一版，基于 Istio 1.5&lt;/strong>&lt;/p>
&lt;p>本文的第一版，基于 Istio 1.5 创作，在此之前，我曾写过基于 Istio 1.1 版本的&lt;a href="https://sreionet.github.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/">理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持&lt;/a>，为了更细致的理解 Istio 中透明流量劫持的全过程，专门创作本文。&lt;/p>
&lt;p>&lt;strong>2022 年 1 月 17 日，第二版，基于 Istio 1.11&lt;/strong>&lt;/p>
&lt;p>本文第一版发布后，在社区里获得了比较大的反响，收到了很多读者的评论和留言。基于这些评论，我也发现了第一版中的很多错误，在加上 Istio 版本发布频繁，在近两年的时间内，Istio 已经作出了众多更新，其中不乏重大更新。因此笔者撰写了本文的第二版，修改了之前版本中的纰漏并根据时下 Istio 的最新版本更新了本文。&lt;/p>
&lt;p>Istio 1.11 与 Istio 1.1 中的 sidecar 注入和流量劫持环节最大的变化是：&lt;/p>
&lt;ul>
&lt;li>iptables 改用命令行工具，不再使用 shell 脚本。&lt;/li>
&lt;li>sidecar inbound 和 outbound 分别指定了端口，而之前是使用同一个端口（15001）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2022 年 4 月 24，第三版，基于 Istio 1.13&lt;/strong>&lt;/p>
&lt;p>这个版本的文章主要是根据当时 Istio 的最新版本更新了文章的部分内容，并重新排版，增加更新说明。&lt;/p>
&lt;p>Istio 1.13 相比 Istio 1.11 的变化是 &lt;code>istioctl proxy-config&lt;/code> 命令的输出有了较大变化。&lt;/p>
&lt;p>&lt;strong>2022 年 5 月 6 日，第四版，基于 Istio 1.13&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>修改了对 &lt;code>ISTIO_ROUTE&lt;/code> iptables 规则 2、5 的解释&lt;/li>
&lt;li>在示意图中增加了路径 16&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2022 年 5 月 12 日，第五版，基于 Istio 1.13&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>将 iptables 说明和 sidecar 注入、init 容器部分独立成了两篇单独的博客，以缩减博客的篇幅，见 &lt;a href="https://sreionet.github.io/blog/istio-pod-process-lifecycle/">Istio 数据平面 Pod 启动过程详解&lt;/a>和&lt;a href="https://sreionet.github.io/blog/understanding-iptables/">理解 iptables&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/">阅读原文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://istio.io/latest/docs/ops/diagnostic-tools/proxy-cmd/">Debugging Envoy and Istiod - istio.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://istio.io/latest/zh/blog/2019/data-plane-setup/">揭开 Istio Sidecar 注入模型的神秘面纱 - istio.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mosn.io/docs/products/structure/traffic-hijack/">MOSN 作为 Sidecar 使用时的流量劫持方案 - mosn.io&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: 深入Istio系列-数据平面Pod启动过程详解</title><link>https://sreionet.github.io/blog/2022/09/10/dc5625/</link><pubDate>Sat, 10 Sep 2022 14:33:42 +0800</pubDate><guid>https://sreionet.github.io/blog/2022/09/10/dc5625/</guid><description>
&lt;p>本文将为你讲解：&lt;/p>
&lt;ul>
&lt;li>Istio 中 sidecar 自动注入过程&lt;/li>
&lt;li>Istio 中的 init 容器启动过程&lt;/li>
&lt;li>启用了 Sidecar 自动注入的 Pod 的启动流程&lt;/li>
&lt;/ul>
&lt;p>下图中展示了 Istio 数据平面中的 Pod 启动完后的组件。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913143432.png" alt="Istio 数据平面 Pod 内部组件">&lt;/p>
&lt;h2 id="istio-中的-sidecar-注入">Istio 中的 sidecar 注入&lt;/h2>
&lt;p>Istio 中提供了以下两种 sidecar 注入方式：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>istioctl&lt;/code> 手动注入。&lt;/li>
&lt;li>基于 Kubernetes 的 &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">突变 webhook 准入控制器（mutating webhook addmission controller&lt;/a> 的自动 sidecar 注入方式。&lt;/li>
&lt;/ul>
&lt;p>不论是手动注入还是自动注入，sidecar 的注入过程都需要遵循如下步骤：&lt;/p>
&lt;ol>
&lt;li>Kubernetes 需要了解待注入的 sidecar 所连接的 Istio 集群及其配置；&lt;/li>
&lt;li>Kubernetes 需要了解待注入的 sidecar 容器本身的配置，如镜像地址、启动参数等；&lt;/li>
&lt;li>Kubernetes 根据 sidecar 注入模板和以上配置填充 sidecar 的配置参数，将以上配置注入到应用容器的一侧；&lt;/li>
&lt;/ol>
&lt;p>使用下面的命令可以手动注入 sidecar。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>istioctl kube-inject -f &lt;span style="color:#e6db74">${&lt;/span>YAML_FILE&lt;span style="color:#e6db74">}&lt;/span> | kuebectl apply -f -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该命令会使用 Istio 内置的 sidecar 配置来注入，下面使用 Istio详细配置请参考 &lt;a href="https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/#manual-sidecar-injection">Istio 官网&lt;/a>。&lt;/p>
&lt;p>注入完成后您将看到 Istio 为原有 pod template 注入了 &lt;code>initContainer&lt;/code> 及 sidecar proxy相关的配置。&lt;/p>
&lt;h3 id="init-容器">Init 容器&lt;/h3>
&lt;p>Init 容器是一种专用容器，它在应用程序容器启动之前运行，用来包含一些应用镜像中不存在的实用工具或安装脚本。&lt;/p>
&lt;p>一个 Pod 中可以指定多个 Init 容器，如果指定了多个，那么 Init 容器将会按顺序依次运行。只有当前面的 Init 容器必须运行成功后，才可以运行下一个 Init 容器。当所有的 Init 容器运行完成后，Kubernetes 才初始化 Pod 和运行应用容器。&lt;/p>
&lt;p>Init 容器使用 Linux Namespace，所以相对应用程序容器来说具有不同的文件系统视图。因此，它们能够具有访问 Secret 的权限，而应用程序容器则不能。&lt;/p>
&lt;p>在 Pod 启动过程中，Init 容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。如果由于运行时或失败退出，将导致容器启动失败，它会根据 Pod 的 &lt;code>restartPolicy&lt;/code> 指定的策略进行重试。然而，如果 Pod 的 &lt;code>restartPolicy&lt;/code> 设置为 Always，Init 容器失败时会使用 &lt;code>RestartPolicy&lt;/code> 策略。&lt;/p>
&lt;p>在所有的 Init 容器没有成功之前，Pod 将不会变成 &lt;code>Ready&lt;/code> 状态。Init 容器的端口将不会在 Service中进行聚集。 正在初始化中的 Pod 处于 &lt;code>Pending&lt;/code> 状态，但应该会将 &lt;code>Initializing&lt;/code> 状态设置为 true。Init 容器运行完成以后就会自动终止。&lt;/p>
&lt;p>关于 Init 容器的详细信息请参考 &lt;a href="https://jimmysong.io/kubernetes-handbook/concepts/init-containers.html">Init 容器 - Kubernetes 中文指南/云原生应用架构实践手册&lt;/a>。&lt;/p>
&lt;h2 id="init-容器解析">Init 容器解析&lt;/h2>
&lt;p>Istio 在 pod 中注入的 Init 容器名为 &lt;code>istio-init&lt;/code>，我们在上面 Istio 注入完成后的 YAML 文件中看到了该容器的启动命令是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>istio-iptables -p &lt;span style="color:#ae81ff">15001&lt;/span> -z &lt;span style="color:#ae81ff">15006&lt;/span> -u &lt;span style="color:#ae81ff">1337&lt;/span> -m REDIRECT -i &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> -x &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> -b &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span> -d 15090,15020
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们再检查下该容器的 &lt;a href="https://github.com/istio/istio/blob/master/pilot/docker/Dockerfile.proxyv2">Dockerfile&lt;/a> 看看 &lt;code>ENTRYPOINT&lt;/code> 是怎么确定启动时执行的命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 前面的内容省略&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># The pilot-agent will bootstrap Envoy.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENTRYPOINT&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;/usr/local/bin/pilot-agent&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到 &lt;code>istio-init&lt;/code> 容器的入口是 &lt;code>/usr/local/bin/istio-iptables&lt;/code> 命令行，该命令行工具的代码的位置在 Istio 源码仓库的 &lt;a href="https://github.com/istio/istio/tree/master/tools/istio-iptables">tools/istio-iptables&lt;/a> 目录。&lt;/p>
&lt;p>注意：在 Istio 1.1 版本时还是使用 &lt;code>isito-iptables.sh&lt;/code> 命令行来操作 IPtables。&lt;/p>
&lt;h3 id="init-容器启动入口">Init 容器启动入口&lt;/h3>
&lt;p>Init 容器的启动入口是 &lt;code>istio-iptables&lt;/code> 命令行，该命令行工具的用法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ istio-iptables &lt;span style="color:#f92672">[&lt;/span>flags&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -p: 指定重定向所有 TCP 流量的 sidecar 端口（默认为 $ENVOY_PORT &lt;span style="color:#f92672">=&lt;/span> 15001）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -m: 指定入站连接重定向到 sidecar 的模式，“REDIRECT” 或 “TPROXY”（默认为 $ISTIO_INBOUND_INTERCEPTION_MODE&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -b: 逗号分隔的入站端口列表，其流量将重定向到 Envoy（可选）。使用通配符 “*” 表示重定向所有端口。为空时表示禁用所有入站重定向（默认为 $ISTIO_INBOUND_PORTS）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -d: 指定要从重定向到 sidecar 中排除的入站端口列表（可选），以逗号格式分隔。使用通配符“*” 表示重定向所有入站流量（默认为 $ISTIO_LOCAL_EXCLUDE_PORTS）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -o：逗号分隔的出站端口列表，不包括重定向到 Envoy 的端口。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i: 指定重定向到 sidecar 的 IP 地址范围（可选），以逗号分隔的 CIDR 格式列表。使用通配符 “*” 表示重定向所有出站流量。空列表将禁用所有出站重定向（默认为 $ISTIO_SERVICE_CIDR）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -x: 指定将从重定向中排除的 IP 地址范围，以逗号分隔的 CIDR 格式列表。使用通配符 “*” 表示重定向所有出站流量（默认为 $ISTIO_SERVICE_EXCLUDE_CIDR）。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -k：逗号分隔的虚拟接口列表，其入站流量（来自虚拟机的）将被视为出站流量。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -g：指定不应用重定向的用户的 GID。&lt;span style="color:#f92672">(&lt;/span>默认值与 -u param 相同&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -u：指定不应用重定向的用户的 UID。通常情况下，这是代理容器的 UID（默认值是 1337，即 istio-proxy 的 UID）。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -z: 所有进入 pod/VM 的 TCP 流量应被重定向到的端口（默认 $INBOUND_CAPTURE_PORT &lt;span style="color:#f92672">=&lt;/span> 15006）。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上传入的参数都会重新组装成 &lt;a href="https://wangchujiang.com/linux-command/c/iptables.html">&lt;code>iptables&lt;/code> &lt;/a>规则，关于该命令的详细用法请访问 &lt;a href="https://github.com/istio/istio/blob/master/tools/istio-iptables/pkg/cmd/root.go">tools/istio-iptables/pkg/cmd/root.go&lt;/a>。&lt;/p>
&lt;p>该容器存在的意义就是让 sidecar 代理可以拦截所有的进出 pod 的流量，15090 端口（Mixer 使用）和 15092 端口（Ingress Gateway）除外的所有入站（inbound）流量重定向到 15006 端口（sidecar），再拦截应用容器的出站（outbound）流量经过 sidecar 处理（通过 15001 端口监听）后再出站。关于 Istio 中端口用途请参考 &lt;a href="https://istio.io/latest/zh/docs/ops/deployment/requirements/">Istio 官方文档&lt;/a>。&lt;/p>
&lt;p>&lt;strong>命令解析&lt;/strong>&lt;/p>
&lt;p>这条启动命令的作用是：&lt;/p>
&lt;ul>
&lt;li>将应用容器的所有流量都转发到 sidecar 的 15006 端口。&lt;/li>
&lt;li>使用 &lt;code>istio-proxy&lt;/code> 用户身份运行， UID 为 1337，即 sidecar 所处的用户空间，这也是 &lt;code>istio-proxy&lt;/code> 容器默认使用的用户，见 YAML 配置中的 &lt;code>runAsUser&lt;/code> 字段。&lt;/li>
&lt;li>使用默认的 &lt;code>REDIRECT&lt;/code> 模式来重定向流量。&lt;/li>
&lt;li>将所有出站流量都重定向到 sidecar 代理（通过 15001 端口）。&lt;/li>
&lt;/ul>
&lt;p>因为 Init 容器初始化完毕后就会自动终止，因为我们无法登陆到容器中查看 iptables 信息，但是 Init 容器初始化结果会保留到应用容器和 sidecar 容器中。&lt;/p>
&lt;h2 id="pod-启动流程">Pod 启动流程&lt;/h2>
&lt;p>启用了 Sidecar 自动注入的 Pod 启动流程如下：&lt;/p>
&lt;ol>
&lt;li>Init 容器先启动，向 Pod 中注入 iptables 规则，进行透明流量拦截。&lt;/li>
&lt;li>随后，Kubernetes 会根据 Pod Spec 中容器的声明顺序依次启动容器，但这是非阻塞的，无法保证第一个容器启动完成后才启动下一个。&lt;code>istio-proxy&lt;/code> 容器启动时，&lt;code>pilot-agent&lt;/code> 将作为 PID 1 号进程，它是 Linux 用户空间的第一个进程，负责拉起其他进程和处理僵尸进程。&lt;code>pilot-agent&lt;/code> 将生成 Envoy bootstrap 配置并拉起 &lt;code>envoy&lt;/code> 进程；应用容器几乎跟 &lt;code>istio-proxy&lt;/code> 容器同时启动，为了防止 Pod 内的容器在还没启动好的情况而接收到外界流量，这时候就绪探针就派上用场了。Kubernetes 会在 &lt;code>istio-proxy&lt;/code> 容器的 15021 端口进行就绪检查，直到 &lt;code>isito-proxy&lt;/code> 启动完成后 kubelet 才会将流量路由到 Pod 内。&lt;/li>
&lt;li>在 Pod 启动完成后，&lt;code>pilot-agent&lt;/code> 将变为守护进程监视系统其他进程，除此之外，该进程还为 Envoy 提供 Bootstrap 配置、证书、健康检查、配置热加载、身份支持及进程生命周期管理等。&lt;/li>
&lt;/ol>
&lt;h2 id="pod-内容器启动顺序问题">Pod 内容器启动顺序问题&lt;/h2>
&lt;p>在 Pod 启动的过程中存在容器启动顺序问题，假设下面这种情况，应用容器先启动，请求其他服务，这时候 &lt;code>istio-proxy&lt;/code> 容器还没启动完成，那么该请求将会失败，如果你的应用的健壮性不足，甚至可能导致应用容器崩溃，进而 Pod 重启。对于这种情况的解决方案是：&lt;/p>
&lt;ul>
&lt;li>修改应用程序，增加超时重试。&lt;/li>
&lt;li>增加应用容器中进程的启动延迟，比如增加 &lt;code>sleep&lt;/code> 时间。&lt;/li>
&lt;li>在应用容器中增加一个 &lt;a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/">&lt;code>postStart&lt;/code>&lt;/a> 配置，检测应用进程是否启动完成，只有当检测成功时，Kubernetes 才会将 Pod 的状态标记为 &lt;code>Running&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这篇文章带领大家了解了 Istio 数据平面中的 Pod 启动过程，还有因为 Pod 内容器启动顺序带来的问题。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://jimmysong.io/blog/istio-pod-process-lifecycle/">阅读原文&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://imroc.cc/post/202105/sidecar-startup-order/">istio 常见问题: Sidecar 启动顺序问题 - imroc.cc&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Blog: 理解Iptable</title><link>https://sreionet.github.io/blog/2022/09/10/b7e1eb/</link><pubDate>Sat, 10 Sep 2022 14:30:05 +0800</pubDate><guid>https://sreionet.github.io/blog/2022/09/10/b7e1eb/</guid><description>
&lt;p>iptables 作为 Linux 内核中的重要功能，有着广泛的应用，在 Istio 中默认就是利用 iptables 做透明流量劫持的。理解 iptables，对于我们理解 Istio 的运作有十分重要的作用。本文将为大家简单介绍下 iptbles。&lt;/p>
&lt;h2 id="iptables-简介">iptables 简介&lt;/h2>
&lt;p>&lt;code>iptables&lt;/code> 是 Linux 内核中的防火墙软件 netfilter 的管理工具，位于用户空间，同时也是 netfilter 的一部分。Netfilter 位于内核空间，不仅有网络地址转换的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。&lt;/p>
&lt;p>在了解 Init 容器初始化的 iptables 之前，我们先来了解下 iptables 和规则配置。&lt;/p>
&lt;p>下图展示了 iptables 调用链。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kbsonlong/notes_statics/master/images/20220913143117.png" alt="">&lt;/p>
&lt;h2 id="iptables-中的表">iptables 中的表&lt;/h2>
&lt;p>Init 容器中使用的的 iptables 版本是 &lt;code>v1.6.0&lt;/code>，共包含 5 张表：&lt;/p>
&lt;ol>
&lt;li>&lt;code>raw&lt;/code> 用于配置数据包，&lt;code>raw&lt;/code> 中的数据包不会被系统跟踪。&lt;/li>
&lt;li>&lt;code>filter&lt;/code> 是用于存放所有与防火墙相关操作的默认表。&lt;/li>
&lt;li>&lt;code>nat&lt;/code> 用于 &lt;a href="https://en.wikipedia.org/wiki/Network_address_translation">网络地址转换&lt;/a>（例如：端口转发）。&lt;/li>
&lt;li>&lt;code>mangle&lt;/code> 用于对特定数据包的修改（参考&lt;a href="https://en.wikipedia.org/wiki/Mangled_packet">损坏数据包&lt;/a>）。&lt;/li>
&lt;li>&lt;code>security&lt;/code> 用于&lt;a href="https://wiki.archlinux.org/index.php/Security#Mandatory_access_control">强制访问控制&lt;/a> 网络规则。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>注&lt;/strong>：在本示例中只用到了 &lt;code>nat&lt;/code> 表。&lt;/p>
&lt;p>不同的表中的具有的链类型如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>规则名称&lt;/th>
&lt;th>raw&lt;/th>
&lt;th>filter&lt;/th>
&lt;th>nat&lt;/th>
&lt;th>mangle&lt;/th>
&lt;th>security&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>PREROUTING&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>INPUT&lt;/td>
&lt;td>&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OUTPUT&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POSTROUTING&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FORWARD&lt;/td>
&lt;td>&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="理解-iptables-规则">理解 iptables 规则&lt;/h2>
&lt;p>查看 &lt;code>istio-proxy&lt;/code> 容器中的默认的 iptables 规则，默认查看的是 filter 表中的规则。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ iptables -L -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain INPUT &lt;span style="color:#f92672">(&lt;/span>policy ACCEPT 350K packets, 63M bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain FORWARD &lt;span style="color:#f92672">(&lt;/span>policy ACCEPT &lt;span style="color:#ae81ff">0&lt;/span> packets, &lt;span style="color:#ae81ff">0&lt;/span> bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Chain OUTPUT &lt;span style="color:#f92672">(&lt;/span>policy ACCEPT 18M packets, 1916M bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkts bytes target prot opt in out source destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到三个默认的链，分别是 INPUT、FORWARD 和 OUTPUT，每个链中的第一行输出表示链名称（在本例中为INPUT/FORWARD/OUTPUT），后跟默认策略（ACCEPT）。&lt;/p>
&lt;p>每条链中都可以添加多条规则，规则是按照顺序从前到后执行的。我们来看下规则的表头定义。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pkts&lt;/strong>：处理过的匹配的报文数量&lt;/li>
&lt;li>&lt;strong>bytes&lt;/strong>：累计处理的报文大小（字节数）&lt;/li>
&lt;li>&lt;strong>target&lt;/strong>：如果报文与规则匹配，指定目标就会被执行。&lt;/li>
&lt;li>&lt;strong>prot&lt;/strong>：协议，例如 &lt;code>tdp&lt;/code>、&lt;code>udp&lt;/code>、&lt;code>icmp&lt;/code> 和 &lt;code>all&lt;/code>。&lt;/li>
&lt;li>&lt;strong>opt&lt;/strong>：很少使用，这一列用于显示 IP 选项。&lt;/li>
&lt;li>&lt;strong>in&lt;/strong>：入站网卡。&lt;/li>
&lt;li>&lt;strong>out&lt;/strong>：出站网卡。&lt;/li>
&lt;li>&lt;strong>source&lt;/strong>：流量的源 IP 地址或子网，或者是 &lt;code>anywhere&lt;/code>。&lt;/li>
&lt;li>&lt;strong>destination&lt;/strong>：流量的目的地 IP 地址或子网，或者是 &lt;code>anywhere&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>还有一列没有表头，显示在最后，表示规则的选项，作为规则的扩展匹配条件，用来补充前面的几列中的配置。&lt;code>prot&lt;/code>、&lt;code>opt&lt;/code>、&lt;code>in&lt;/code>、&lt;code>out&lt;/code>、&lt;code>source&lt;/code> 和 &lt;code>destination&lt;/code> 和显示在 &lt;code>destination&lt;/code> 后面的没有表头的一列扩展条件共同组成匹配规则。当流量匹配这些规则后就会执行 &lt;code>target&lt;/code>。&lt;/p>
&lt;p>&lt;strong>target 支持的类型&lt;/strong>&lt;/p>
&lt;p>&lt;code>target&lt;/code> 类型包括 ACCEPT&lt;code>、REJECT&lt;/code>、&lt;code>DROP&lt;/code>、&lt;code>LOG&lt;/code> 、&lt;code>SNAT&lt;/code>、&lt;code>MASQUERADE&lt;/code>、&lt;code>DNAT&lt;/code>、&lt;code>REDIRECT&lt;/code>、&lt;code>RETURN&lt;/code> 或者跳转到其他规则等。只要执行到某一条链中只有按照顺序有一条规则匹配后就可以确定报文的去向了，除了 &lt;code>RETURN&lt;/code> 类型，类似编程语言中的 &lt;code>return&lt;/code> 语句，返回到它的调用点，继续执行下一条规则。&lt;code>target&lt;/code> 支持的配置详解请参考 &lt;a href="http://www.zsythink.net/archives/1199">iptables 详解（1）：iptables 概念&lt;/a>。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对 iptables 的简要介绍，你已经了解了 iptables 是怎样运行的，规则链及其执行顺序。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://jimmysong.io/blog/understanding-iptables/">阅读原文&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>